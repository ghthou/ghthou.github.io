<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ghthou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ghthou.github.io/"/>
  <updated>2020-11-07T10:26:04.689Z</updated>
  <id>https://ghthou.github.io/</id>
  
  <author>
    <name>ghthou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitLab 使用 Server Hooks 校验 Commit 用户名与邮箱</title>
    <link href="https://ghthou.github.io/2020/11/07/GitLab-%E4%BD%BF%E7%94%A8-Server-Hooks-%E6%A0%A1%E9%AA%8C-Commit-%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E9%82%AE%E7%AE%B1/"/>
    <id>https://ghthou.github.io/2020/11/07/GitLab-使用-Server-Hooks-校验-Commit-用户名与邮箱/</id>
    <published>2020-11-07T07:53:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="校验原因"><a href="#校验原因" class="headerlink" title="校验原因"></a>校验原因</h1><p>在企业内部进行代码提交时, commit 中会存在提交者的 username 与 email</p><p>但该 username 与 email 是提交者在 Git 客户端自己设置的</p><p>如果提交者忘记设置或者设置错误, 并将 commit push 到远程服务后</p><p>当协作者需要寻找该 commit 提交者时, 错误的 username 与 email 会对协作者造成障碍</p><p>为解决这个问题, 需要在 GitLab 使用 Server Hooks 对 commit 进行校验, 只有 username 与 email 与 GitLab 中的一致才允许 push, 否则拒绝 push 并提示修改</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>如需对 commit 的 username 与 email 进行校验, 那么需要在校验脚本中获取 push 者的 username 与 email</p><p>通过 <a href="https://docs.gitlab.com/ee/administration/server_hooks.html#environment-variables" target="_blank" rel="noopener">GitLab Server Hooks</a> 文档可知存在 <code>GL_USERNAME</code> 环境变量, 该变量的值为 push 者的 GitLab 的 username, 但是缺乏 email 相关环境变量</p><p>为获取 push 者的 email, 需使用 GitLab 提供的 <a href="https://docs.gitlab.com/ee/api/users.html#list-users" target="_blank" rel="noopener">Users API</a> 进行获取</p><p>通过 API 文档可知只有 admin 用户才返回用户 email, 所以需要先使用 admin 账号生成一个 TOKEN</p><p>这个 TOKEN 只是用来获取获取用户 email, 故创建时选择 read_user 的范围即可</p><h1 id="校验用户名与邮箱-hook"><a href="#校验用户名与邮箱-hook" class="headerlink" title="校验用户名与邮箱 hook"></a>校验用户名与邮箱 hook</h1><p>GitHub 的 <a href="https://github.com/github/platform-samples" target="_blank" rel="noopener">platform-samples</a> 项目提供了一个 <a href="https://github.com/github/platform-samples/blob/master/pre-receive-hooks/commit-current-user-check.sh" target="_blank" rel="noopener">commit-current-user-check.sh</a> 的 hook, 我们可以将该脚本下载下来, 进行修改即可</p><p>以下是修改后的 <code>commit-current-user-check.sh</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 GitLab API 所需的 token, 需使用 admin 用户生成, scope 选择 read_user 即可</span></span><br><span class="line"><span class="comment"># https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html</span></span><br><span class="line">TOKEN=<span class="string">"GitLab admin user read_user TOKEN"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GitLab 服务的访问地址, 因为该脚本是放置在 GitLab 服务中, 所以使用本机地址即可</span></span><br><span class="line">GITLAB_URL=http://127.0.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 python 提取 json 中的 name 和 email 代码</span></span><br><span class="line">get_name_and_email=<span class="string">"import sys, json;</span></span><br><span class="line"><span class="string">try:</span></span><br><span class="line"><span class="string">  obj=json.load(sys.stdin);</span></span><br><span class="line"><span class="string">  print(obj[0]['name']+':'+obj[0]['email'])</span></span><br><span class="line"><span class="string">except:</span></span><br><span class="line"><span class="string">    print('error')"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 GitLab Users API 获取用户显示名称与 email</span></span><br><span class="line"><span class="comment"># GL_USERNAME 为 GitLab 的 username, 一般为英文, 而 commit 中的 username 我们一般设置为中文</span></span><br><span class="line"><span class="comment"># API 返回的数据为 json 格式, 通过 python 代码进行提取显示名称与 email</span></span><br><span class="line"><span class="comment"># 因为显示名称为中文, 为了解决乱码问题, 配置 PYTHONIOENCODING='UTF-8'</span></span><br><span class="line"><span class="comment"># python 返回的格式为 name:email</span></span><br><span class="line"><span class="comment"># https://docs.gitlab.com/ee/api/users.html#list-users</span></span><br><span class="line">GITLAB_NAME_EMAIL=`curl -s --header <span class="string">"Private-Token: <span class="variable">$&#123;TOKEN&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;GITLAB_URL&#125;</span>/api/v4/users?username=<span class="variable">$&#123;GL_USERNAME&#125;</span>"</span> | PYTHONIOENCODING=<span class="string">'UTF-8'</span> python3 -c <span class="string">"<span class="variable">$&#123;get_name_and_email&#125;</span>"</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;GITLAB_NAME_EMAIL&#125;</span>"</span> == <span class="string">"error"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Push 异常: GitLab 获取用户信息异常, 请通知管理员进行排查"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取显示名称</span></span><br><span class="line">GITLAB_USER_NAME=<span class="variable">$&#123;GITLAB_NAME_EMAIL%:*&#125;</span></span><br><span class="line"><span class="comment"># 截取 email</span></span><br><span class="line">GITLAB_USER_EMAIL=<span class="variable">$&#123;GITLAB_NAME_EMAIL#*:&#125;</span></span><br><span class="line"></span><br><span class="line">zero_commit=<span class="string">"0000000000000000000000000000000000000000"</span></span><br><span class="line"></span><br><span class="line">excludeExisting=<span class="string">"--not --all"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> oldrev newrev refname; <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># branch or tag get deleted</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$newrev</span>"</span> = <span class="string">"<span class="variable">$zero_commit</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">continue</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check for new branch or tag</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$oldrev</span>"</span> = <span class="string">"<span class="variable">$zero_commit</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    span=`git rev-list <span class="variable">$newrev</span> <span class="variable">$excludeExisting</span>`</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    span=`git rev-list <span class="variable">$oldrev</span>..<span class="variable">$newrev</span> <span class="variable">$excludeExisting</span>`</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> COMMIT <span class="keyword">in</span> <span class="variable">$span</span>;</span><br><span class="line">   <span class="keyword">do</span></span><br><span class="line">        AUTHOR_USER=`git <span class="built_in">log</span> --format=%an -n 1 <span class="variable">$&#123;COMMIT&#125;</span>`</span><br><span class="line">        AUTHOR_EMAIL=`git <span class="built_in">log</span> --format=%ae -n 1 <span class="variable">$&#123;COMMIT&#125;</span>`</span><br><span class="line">        COMMIT_USER=`git <span class="built_in">log</span> --format=%cn -n 1 <span class="variable">$&#123;COMMIT&#125;</span>`</span><br><span class="line">        COMMIT_EMAIL=`git <span class="built_in">log</span> --format=%ce -n 1 <span class="variable">$&#123;COMMIT&#125;</span>`</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进行 username 与 email 校验</span></span><br><span class="line">        <span class="comment"># 在 GitHub 的示例脚本中启用了 AUTHOR_USER 与 AUTHOR_EMAIL 校验, 但是使用时可能存在 author 与 committer 不是同一个人的情况, 故注释校验 AUTHOR_USER 与 AUTHOR_EMAIL 的代码</span></span><br><span class="line">        <span class="comment"># 如果自己公司实际使用时不存在这种情况, 可以取消注释</span></span><br><span class="line">        <span class="comment"># author 与 committer 区别 https://stackoverflow.com/q/6755824</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        if [[ $&#123;AUTHOR_USER&#125; != $&#123;GITLAB_USER_NAME&#125; ]]; then</span></span><br><span class="line"><span class="comment">#            echo -e "Push 异常: $&#123;COMMIT&#125; 的 author ($&#123;AUTHOR_USER&#125;) 不是 GitLab 中的中文名 ($&#123;GITLAB_USER_NAME&#125;)"</span></span><br><span class="line"><span class="comment">#            exit 20</span></span><br><span class="line"><span class="comment">#        fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;COMMIT_USER&#125;</span> != <span class="variable">$&#123;GITLAB_USER_NAME&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"Push 异常: <span class="variable">$&#123;COMMIT&#125;</span> 的 committer (<span class="variable">$&#123;COMMIT_USER&#125;</span>) 不是 GitLab 中的中文名 (<span class="variable">$&#123;GITLAB_USER_NAME&#125;</span>)"</span></span><br><span class="line">            <span class="built_in">exit</span> 30</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        if [[ $&#123;AUTHOR_EMAIL&#125; != $&#123;GITLAB_USER_EMAIL&#125; ]]; then</span></span><br><span class="line"><span class="comment">#            echo -e "Push 异常: $&#123;COMMIT&#125; 的 author 的邮箱 ($&#123;AUTHOR_EMAIL&#125;) 不是 GitLab 中的邮箱 ($&#123;GITLAB_USER_EMAIL&#125;)"</span></span><br><span class="line"><span class="comment">#            exit 40</span></span><br><span class="line"><span class="comment">#        fi</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> [[ <span class="variable">$&#123;COMMIT_EMAIL&#125;</span> != <span class="variable">$&#123;GITLAB_USER_EMAIL&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">"Push 异常: <span class="variable">$&#123;COMMIT&#125;</span> 的 committer 的邮箱 (<span class="variable">$&#123;COMMIT_EMAIL&#125;</span>) 不是 GitLab 中的邮箱 (<span class="variable">$&#123;GITLAB_USER_EMAIL&#125;</span>)"</span></span><br><span class="line">            <span class="built_in">exit</span> 50</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="配置-hook"><a href="#配置-hook" class="headerlink" title="配置 hook"></a>配置 hook</h1><p>由该 hook 功能可知其类型应为 <code>pre-receive</code> </p><p>我们按照 <a href="https://docs.gitlab.com/ee/administration/server_hooks.html#create-a-global-server-hook-for-all-repositories" target="_blank" rel="noopener">GitLab 全局配置 Server Hook 文档</a> 将 <code>commit-current-user-check.sh</code>  放在 server hook 的 <code>pre-receive.d</code> 目录下</p><p>并添加可执行权限与配置所属者为 git 用户即可</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x commit-current-user-check.sh</span><br><span class="line">chown git:git commit-current-user-check.sh</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://docs.gitlab.com/ee/administration/server_hooks.html" target="_blank" rel="noopener">GitLab Server Hooks 文档</a></p><p><a href="https://docs.gitlab.com/ee/api/README.html" target="_blank" rel="noopener">GitLab API 文档</a></p><p><a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html" target="_blank" rel="noopener">GitLab Personal access tokens 文档</a></p><p><a href="https://docs.gitlab.com/ee/api/users.html" target="_blank" rel="noopener">GitLab Users API 文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;校验原因&quot;&gt;&lt;a href=&quot;#校验原因&quot; class=&quot;headerlink&quot; title=&quot;校验原因&quot;&gt;&lt;/a&gt;校验原因&lt;/h1&gt;&lt;p&gt;在企业内部进行代码提交时, commit 中会存在提交者的 username 与 email&lt;/p&gt;
&lt;p&gt;但该 usern
      
    
    </summary>
    
      <category term="Linux" scheme="https://ghthou.github.io/categories/Linux/"/>
    
    
      <category term="GitLab" scheme="https://ghthou.github.io/tags/GitLab/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins Multibranch Pipeline 集成 GitLab Webhook</title>
    <link href="https://ghthou.github.io/2020/09/13/Jenkins-Multibranch-Pipeline-%E9%9B%86%E6%88%90-GitLab-Webhook/"/>
    <id>https://ghthou.github.io/2020/09/13/Jenkins-Multibranch-Pipeline-集成-GitLab-Webhook/</id>
    <published>2020-09-13T03:08:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所需插件"><a href="#所需插件" class="headerlink" title="所需插件"></a>所需插件</h1><p>在 Jenkins 中安装 <a href="https://plugins.jenkins.io/generic-webhook-trigger/" target="_blank" rel="noopener">Generic Webhook Trigger</a> 插件</p><h1 id="Jenkinsfile-配置"><a href="#Jenkinsfile-配置" class="headerlink" title="Jenkinsfile 配置"></a>Jenkinsfile 配置</h1><p>在 GitLab 中创建一个用于集成的演示项目</p><p>并在该项目根路径创建一个 Jenkinsfile 文件, 文件内容如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    <span class="comment">// 触发器, 默认存在三种, 但是不满足 Webhook 需求, 所以使用插件提供的 GenericTrigger 触发器</span></span><br><span class="line">    triggers &#123;</span><br><span class="line">        <span class="comment">// 由 Generic Webhook Trigger 提供的触发器</span></span><br><span class="line">        GenericTrigger(</span><br><span class="line">                <span class="comment">// 参数, 在这里配置的参数会被配置为环境变量</span></span><br><span class="line">                <span class="comment">// 支持使用 JSONPath 和 XPath 进行提取</span></span><br><span class="line">                <span class="comment">// 提取来源为 webhook 发送的 request body 中的内容</span></span><br><span class="line">                <span class="comment">// GitLab 发送的 request body 内容格式可通过文档查看, 文档地址为你的 GitLab 访问地址 + /help/user/project/integrations/webhooks</span></span><br><span class="line"><span class="symbol">                genericVariables:</span> [</span><br><span class="line">                        <span class="comment">// 提取分支名称, 格式为 refs/heads/&#123;branch&#125;</span></span><br><span class="line">                        [<span class="string">key:</span> <span class="string">'WEBHOOK_REF'</span>, <span class="string">value:</span> <span class="string">'$.ref'</span>],</span><br><span class="line">                        <span class="comment">// 提取用户显示名称</span></span><br><span class="line">                        [<span class="string">key:</span> <span class="string">'WEBHOOK_USER_NAME'</span>, <span class="string">value:</span> <span class="string">'$.user_name'</span>],</span><br><span class="line">                        <span class="comment">// 提取最近提交 id</span></span><br><span class="line">                        [<span class="string">key:</span> <span class="string">'WEBHOOK_RECENT_COMMIT_ID'</span>, <span class="string">value:</span> <span class="string">'$.commits[-1].id'</span>],</span><br><span class="line">                        <span class="comment">// 提取最近提交 message</span></span><br><span class="line">                        [<span class="string">key:</span> <span class="string">'WEBHOOK_RECENT_COMMIT_MESSAGE'</span>, <span class="string">value:</span> <span class="string">'$.commits[-1].message'</span>],</span><br><span class="line">                        <span class="comment">// 如需更多参数可通过查看 request body 参数文档进行提取</span></span><br><span class="line">                ],</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 项目运行消息, 会显示在 Jenkins Blue 中的项目活动列表中</span></span><br><span class="line"><span class="symbol">                causeString:</span> <span class="string">'$WEBHOOK_USER_NAME 推送 commit 到 $WEBHOOK_REF 分支'</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// token, 因为对外的 webhook url 是一致的, 当希望触发某个特定的 Job 时可以为每个 Job 配置不同的 token, 然后在 webhook 中配置该参数</span></span><br><span class="line"><span class="symbol">                token:</span> <span class="string">'webhook-test-token'</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 打印通过 genericVariables 配置的变量</span></span><br><span class="line"><span class="symbol">                printContributedVariables:</span> <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 打印 request body 内容</span></span><br><span class="line"><span class="symbol">                printPostContent:</span> <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 避免使用已触发工作的信息作出响应</span></span><br><span class="line"><span class="symbol">                silentResponse:</span> <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 可选的正则表达式过滤, 比如希望仅在 master 分支上触发, 你可以进行如下配置</span></span><br><span class="line"><span class="symbol">                regexpFilterText:</span> <span class="string">'$WEBHOOK_REF'</span>,</span><br><span class="line"><span class="symbol">                regexpFilterExpression:</span> <span class="string">'refs/heads/master'</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'查看环境变量'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">"env"</span></span><br><span class="line">                sh <span class="string">"echo \\\$WEBHOOK_REF = $WEBHOOK_REF"</span></span><br><span class="line">                echo <span class="string">"env.WEBHOOK_REF = $&#123;env.WEBHOOK_REF&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jenkins-配置"><a href="#Jenkins-配置" class="headerlink" title="Jenkins 配置"></a>Jenkins 配置</h1><p>在 Jenkins 创建一个 Multibranch Pipeline 项目</p><p>配置分支源为 Git, 项目仓库为 GitLab 中的项目地址</p><p>同时配置不通过SCM自动化触发, 该配置是指保存后不要直接运行 Job</p><p><img src="/images/Jenkins-Multibranch-Pipeline-集成-GitLab-Webhook/不通过SCM自动化触发配置.png" alt="不通过SCM自动化触发配置"></p><p>然后进行保存</p><h1 id="Webhook-配置"><a href="#Webhook-配置" class="headerlink" title="Webhook 配置"></a>Webhook 配置</h1><p>进入项目 Webhook 配置页面</p><p><img src="/images/Jenkins-Multibranch-Pipeline-集成-GitLab-Webhook/webhook配置.png" alt="webhook配置"></p><p>URL 地址格式为 <code>{jenkins 地址}/generic-webhook-trigger/invoke?token={token}</code></p><blockquote><p>如果 jenkins 地址为内网, 需要在 GitLab 管理配置页面的 Outbound requests 下勾选 Allow requests to the local network from web hooks and services 属性, 否则会保存失败</p><p>参考链接: <a href="https://docs.gitlab.com/ee/security/webhooks.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/security/webhooks.html</a></p></blockquote><blockquote><p>Generic Webhook Trigger 插件可以通过配置 IP 白名单的方式仅接受允许的 IP</p><p>参考链接: <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin#whitelist-hosts" target="_blank" rel="noopener">https://github.com/jenkinsci/generic-webhook-trigger-plugin#whitelist-hosts</a></p></blockquote><p>然后点击最下方的保存按钮即可</p><p>保存后在 webhooks 页面最下面可以看到该记录, 点击 <strong>Test</strong> 按钮, 然后选择 Push events, 此时会手动触发一次 webhook 请求, 如果响应成功, 会显示一条 <strong>Hook executed successfully: HTTP 200</strong> 的消息提示</p><p>同时在 Jenkins 的 Blue 页面查看项目活动记录, 可以看到项目运行成功的记录, 其中的消息部分为即为 causeString 属性</p><h1 id="手动运行"><a href="#手动运行" class="headerlink" title="手动运行"></a>手动运行</h1><p>除了通过 Webhook 运行的方式外, 我们可能存在手动运行的需求</p><p>如果我们在 Jenkinsfile 中没有依赖 genericVariables 配置的环境变量的话, 我们可以直接手动运行, 否则的话使用该变量会出现问题</p><p>这个时候需要定义一个与 genericVariables 中 key 名称相同的 parameter</p><p>配置方式如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(<span class="string">name:</span> <span class="string">'WEBHOOK_REF'</span>, <span class="string">defaultValue:</span> <span class="string">'refs/heads/master'</span>, <span class="string">description:</span> <span class="string">'分支名称?'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    triggers &#123;</span><br><span class="line">        <span class="comment">// 由 Generic Webhook Trigger 提供的触发器</span></span><br><span class="line">        GenericTrigger(</span><br><span class="line"><span class="symbol">            genericVariables:</span> [</span><br><span class="line">                <span class="comment">// 提取分支名称, 格式为 refs/heads/&#123;branch&#125;</span></span><br><span class="line">                [<span class="string">key:</span> <span class="string">'WEBHOOK_REF'</span>, <span class="string">value:</span> <span class="string">'$.ref'</span>],</span><br><span class="line">            ],</span><br><span class="line">            </span><br><span class="line"><span class="symbol">            token:</span> <span class="string">'webhook-test-token'</span>,</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">'查看环境变量'</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh <span class="string">"env"</span></span><br><span class="line">                sh <span class="string">"echo \\\$WEBHOOK_REF = $WEBHOOK_REF"</span></span><br><span class="line">                echo <span class="string">"env.WEBHOOK_REF = $&#123;env.WEBHOOK_REF&#125;"</span></span><br><span class="line">                echo <span class="string">"params.WEBHOOK_REF = $&#123;params.WEBHOOK_REF&#125;"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是通过 webhook 运行, Generic Webhook Trigger 会使用 genericVariables 中的 WEBHOOK_REF 填充 parameter 中的 WEBHOOK_REF</p><p>如果是手动运行, Generic Webhook Trigger 会使用 parameter 中的 WEBHOOK_REF 填充 genericVariables 中的 WEBHOOK_REF</p><h1 id="GenericTrigger-自定义配置"><a href="#GenericTrigger-自定义配置" class="headerlink" title="GenericTrigger 自定义配置"></a>GenericTrigger 自定义配置</h1><p>GenericTrigger 的属性说明可以查看 <a href="https://github.com/jenkinsci/generic-webhook-trigger-plugin" target="_blank" rel="noopener">插件官方文档</a></p><p>同时可以在项目配置页面点击<strong>流水线语法</strong>, 然后使用可视化语法生成器生成 trigger 配置</p><p><img src="/images/Jenkins-Multibranch-Pipeline-集成-GitLab-Webhook/流水线语法1.png" alt="webhook配置"></p><p><img src="/images/Jenkins-Multibranch-Pipeline-集成-GitLab-Webhook/流水线语法2.png" alt="webhook配置"></p><p>填写配置属性后点击 Generate Declarative Directive 按钮即可生成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;所需插件&quot;&gt;&lt;a href=&quot;#所需插件&quot; class=&quot;headerlink&quot; title=&quot;所需插件&quot;&gt;&lt;/a&gt;所需插件&lt;/h1&gt;&lt;p&gt;在 Jenkins 中安装 &lt;a href=&quot;https://plugins.jenkins.io/generic-webh
      
    
    </summary>
    
      <category term="Linux" scheme="https://ghthou.github.io/categories/Linux/"/>
    
    
      <category term="GitLab" scheme="https://ghthou.github.io/tags/GitLab/"/>
    
      <category term="Jenkins" scheme="https://ghthou.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 配置接收 String 参数时自动去除前后空格</title>
    <link href="https://ghthou.github.io/2018/10/04/Spring-MVC-%E9%85%8D%E7%BD%AE%E6%8E%A5%E6%94%B6-String-%E5%8F%82%E6%95%B0%E6%97%B6%E8%87%AA%E5%8A%A8%E5%8E%BB%E9%99%A4%E5%89%8D%E5%90%8E%E7%A9%BA%E6%A0%BC/"/>
    <id>https://ghthou.github.io/2018/10/04/Spring-MVC-配置接收-String-参数时自动去除前后空格/</id>
    <published>2018-10-04T12:49:17.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>在接收 <code>String</code> 类型参数时，前后可能存在一些空格，如果未曾去除就直接保存的话，可能会对一些特殊的业务场景造成致命影响。为了杜绝这种情况，需要在接收参数时进行前后空格清除处理</p><p>而接收 <code>String</code> 参数主要存在俩种情况</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="接收-url-或-form-表单中的参数"><a href="#接收-url-或-form-表单中的参数" class="headerlink" title="接收 url 或 form 表单中的参数"></a>接收 <code>url</code> 或 <code>form</code> 表单中的参数</h4><p>对于这种情况，<code>Spring MVC</code> 提供了一个 <code>org.springframework.beans.propertyeditors.StringTrimmerEditor</code> 类，我们只需要在参数绑定中进行注册就行，方式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerStringParamTrimConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建 String trim 编辑器</span></span><br><span class="line">          <span class="comment">// 构造方法中 boolean 参数含义为如果是空白字符串,是否转换为null</span></span><br><span class="line">          <span class="comment">// 即如果为true,那么 " " 会被转换为 null,否者为 ""</span></span><br><span class="line">        StringTrimmerEditor propertyEditor = <span class="keyword">new</span> StringTrimmerEditor(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 为 String 类对象注册编辑器</span></span><br><span class="line">        binder.registerCustomEditor(String<span class="class">.<span class="keyword">class</span>, <span class="title">propertyEditor</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接收Request-Body中JSON或XML对象参数"><a href="#接收Request-Body中JSON或XML对象参数" class="headerlink" title="接收Request Body中JSON或XML对象参数"></a>接收<code>Request Body</code>中<code>JSON</code>或<code>XML</code>对象参数</h4><p>在这里，<code>Spring MVC</code> 是使用 <code>Jackson</code> 对参数进行反序列化，所以对于 <code>String</code> 的处理是在 <code>Jackson</code> 中配置</p><p><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/html/howto-spring-mvc.html#howto-customize-the-jackson-objectmapper" target="_blank" rel="noopener">如何自定义 Jackson ObjectMapper</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Jackson2ObjectMapperBuilderCustomizer() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder)</span> </span>&#123;</span><br><span class="line">              <span class="comment">// 为 String 类型自定义反序列化操作</span></span><br><span class="line">            jacksonObjectMapperBuilder</span><br><span class="line">                    .deserializerByType(String<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">StdScalarDeserializer</span>&lt;<span class="title">String</span>&gt;(<span class="title">String</span>.<span class="title">class</span>) </span>&#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext ctx)</span></span></span><br><span class="line"><span class="function">                                <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                              <span class="comment">// 去除前后空格</span></span><br><span class="line">                            <span class="keyword">return</span> StringUtils.trimWhitespace(jsonParser.getValueAsString());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTrimController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/url"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">urlParam</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/form"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">formParam</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/body"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">bodyParam</span><span class="params">(@RequestBody User u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureMockMvc</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringMvcStringTrimSamplesApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAM = <span class="string">" test "</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESULT = PARAM.trim();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">url</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/url?name="</span> + PARAM))</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().string(RESULT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">form</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/form"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_FORM_URLENCODED)</span><br><span class="line">                .content(<span class="string">"name="</span> + PARAM)</span><br><span class="line">        )</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.name"</span>).value(RESULT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">body</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String json = <span class="string">"&#123;\"name\":\""</span> + PARAM + <span class="string">"\"&#125;"</span>;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/body"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">                .content(json)</span><br><span class="line">        )</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.name"</span>).value(RESULT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xmlBody</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String json = <span class="string">"&lt;root&gt;&lt;name&gt;"</span> + PARAM + <span class="string">"&lt;/name&gt;&lt;/root&gt;"</span>;</span><br><span class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/body"</span>)</span><br><span class="line">                .contentType(MediaType.APPLICATION_XML_VALUE)</span><br><span class="line">                .content(json)</span><br><span class="line">        )</span><br><span class="line">                .andDo(MockMvcResultHandlers.print())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">                .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))</span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.name"</span>).value(RESULT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>对与这种所有项目都需要的通用配置，我们应该抽取一个公共模块，然后通过引入依赖来实现自动配置</p><p>创建 <code>commons</code> 模块</p><p>创建自动配置类 <code>WebMvcStringTrimAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;Servlet<span class="class">.<span class="keyword">class</span>, <span class="title">DispatcherServlet</span>.<span class="title">class</span>, <span class="title">WebMvcConfigurer</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">AutoConfigureAfter</span>(<span class="title">WebMvcAutoConfiguration</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">WebMvcStringTrimAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ControllerAdvice</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerStringParamTrimConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@InitBinder</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 创建 String trim 编辑器</span></span><br><span class="line">            <span class="comment">// 构造方法中 boolean 参数含义为如果是空白字符串,是否转换为null</span></span><br><span class="line">            <span class="comment">// 即如果为true,那么 " " 会被转换为 null,否者为 ""</span></span><br><span class="line">            StringTrimmerEditor propertyEditor = <span class="keyword">new</span> StringTrimmerEditor(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 为 String 类对象注册编辑器</span></span><br><span class="line">            binder.registerCustomEditor(String<span class="class">.<span class="keyword">class</span>, <span class="title">propertyEditor</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jackson2ObjectMapperBuilderCustomizer <span class="title">jackson2ObjectMapperBuilderCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2ObjectMapperBuilderCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder)</span> </span>&#123;</span><br><span class="line">                jacksonObjectMapperBuilder</span><br><span class="line">                        .deserializerByType(String<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">StdScalarDeserializer</span>&lt;<span class="title">String</span>&gt;(<span class="title">String</span>.<span class="title">class</span>) </span>&#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext ctx)</span></span></span><br><span class="line"><span class="function">                                    <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> StringUtils.trimWhitespace(jsonParser.getValueAsString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置引入依赖后存在 <code>SpringBootApplication</code> ，<code>EnableAutoConfiguration</code>注解时自动配置</p><p>在 <code>resurces</code> 创建 <code>META-INF/spring.factories</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 自动配置</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.github.ghthou.springmvcstringtrimsamples.commons.autoconfigure.WebMvcStringTrimAutoConfiguration</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/ghthou/spring-mvc-string-trim-samples" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在接收 &lt;code&gt;String&lt;/code&gt; 类型参数时，前后可能存在一些空格，如果未曾去除就直接保存的话，可能会对一些特殊的业务场景造成致命影响。为了杜绝这种情况，需要在接收参数时进行前后空格清除处理&lt;/p&gt;
&lt;p&gt;而接收 &lt;code&gt;String&lt;/code&gt; 参数主
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Spring MVC" scheme="https://ghthou.github.io/tags/Spring-MVC/"/>
    
      <category term="Spring Boot" scheme="https://ghthou.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>使用 Spring Boot Admin 管理 Spring Boot 项目</title>
    <link href="https://ghthou.github.io/2018/09/26/%E4%BD%BF%E7%94%A8Spring-Boot-Admin%E7%AE%A1%E7%90%86Spring-Boot%E9%A1%B9%E7%9B%AE/"/>
    <id>https://ghthou.github.io/2018/09/26/使用Spring-Boot-Admin管理Spring-Boot项目/</id>
    <published>2018-09-26T13:08:26.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready.html" target="_blank" rel="noopener"><code>spring-boot-actuator</code></a> 模块虽然为 Spring-Boot 项目提供了监控及管理的 <code>API</code> ，但是并没有提供对应的 UI 管理系统，此时我们可以使用开源的 <a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">Spring-Boot-Amin</a> 来为我们的 Spring-Boot 项目提供一个可视化的管理页面</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>首先在创建一个简单的 Spring-Boot 项目，可以选择在<a href="https://start.spring.io/" target="_blank" rel="noopener"> start.spring.io</a> 中创建，然后导入</p><p>在项目顶级 <code>pom.xml</code> 定义 <code>spring-boot-admin</code> 的依赖版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot-admin.version</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">spring-boot-admin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-admin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建-client-模块"><a href="#创建-client-模块" class="headerlink" title="创建 client 模块"></a>创建 client 模块</h4><p>在项目中创建一个用于与 <code>spring-boot-admin</code> 集成的演示模块 <code>client</code></p><p>引入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ClientApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时可以通过启动 <code>main</code> 方法查看启动是否正常</p><h4 id="创建-server-模块"><a href="#创建-server-模块" class="headerlink" title="创建 server 模块"></a>创建 server 模块</h4><p>在项目中创建 <code>spring-boot-admin</code> 服务模块 <code>server</code></p><p>引入如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件 <code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 配置服务端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost:8090" target="_blank" rel="noopener">localhost:8090</a> 即可进入 <code>spring-boot-admin</code> 管理页面，但是此时还没有项目与它进行集成，所以应用数为 0</p><h3 id="集成-Spring-Boot-Admin-服务"><a href="#集成-Spring-Boot-Admin-服务" class="headerlink" title="集成 Spring-Boot-Admin 服务"></a>集成 Spring-Boot-Admin 服务</h3><p>在演示模块 <code>client</code> 中添加配置文件 <code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 项目名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># 配置文档</span></span><br><span class="line">        <span class="comment"># http://codecentric.github.io/spring-boot-admin/current/#spring-boot-admin-client</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># spring-boot-admin 服务端地址</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment"># 开放所有端点</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>再重启 <code>client</code>项目，此时 <code>client</code> 项目会向 <code>http://localhost:8090</code> 注册自己的服务信息</p><p>刷新 <a href="http://localhost:8090" target="_blank" rel="noopener">localhost:8090</a> 页面，可发现 <code>client</code> 已经注册成功，此时可以查看 <code>client</code> 相关信息</p><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><h4 id="修改注册的服务地址"><a href="#修改注册的服务地址" class="headerlink" title="修改注册的服务地址"></a>修改注册的服务地址</h4><p>在默认配置中使用 <code>InetAddress.getLocalHost().getCanonicalHostName()</code> 获取服务地址，本地环境一般没有问题，但是在生产环境中可能获取的是本机内网<code>IP</code>，导致<code>spring-boot-admin</code> 无法访问注册的服务，所以需要更改注册时的服务地址，配置方式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">service-base-url:</span> <span class="string">"可供 spring-boot-admin 访问的基础地址,格式为 http://&#123;主机或IP地址&#125;:&#123;端口&#125;/"</span></span><br></pre></td></tr></table></figure><h4 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h4><h5 id="server-端安全配置"><a href="#server-端安全配置" class="headerlink" title="server 端安全配置"></a>server 端安全配置</h5><p>使用<code>spring-security</code>实现登录验证</p><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>spring-security</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件中的 spring.boot.admin.context-path 属性值</span></span><br><span class="line"><span class="comment">     * 下列中涉及到该参数的都是为了处理对 context-path 的支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String adminContextPath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecuritySecureConfig</span><span class="params">(AdminServerProperties adminServerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adminContextPath = adminServerProperties.getContextPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// @formatter:off</span></span><br><span class="line">        SavedRequestAwareAuthenticationSuccessHandler successHandler = <span class="keyword">new</span> SavedRequestAwareAuthenticationSuccessHandler();</span><br><span class="line">        successHandler.setTargetUrlParameter(<span class="string">"redirectTo"</span>);</span><br><span class="line">        successHandler.setDefaultTargetUrl(adminContextPath + <span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// 对静态资源与登录url放行</span></span><br><span class="line">                .antMatchers(adminContextPath + <span class="string">"/assets/**"</span>).permitAll()</span><br><span class="line">                .antMatchers(adminContextPath + <span class="string">"/login"</span>).permitAll()</span><br><span class="line">                <span class="comment">// 其他请求需要登录</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 配置登录url,主要是为了支持 spring.boot.admin.context-path 属性</span></span><br><span class="line">                .formLogin().loginPage(adminContextPath + <span class="string">"/login"</span>).successHandler(successHandler).and()</span><br><span class="line">                <span class="comment">// 配置注销url</span></span><br><span class="line">                .logout().logoutUrl(adminContextPath + <span class="string">"/logout"</span>).and()</span><br><span class="line">                .httpBasic().and()</span><br><span class="line">                .csrf()</span><br><span class="line">                <span class="comment">// 配置 csrf,在前端使用 cookie 保存 csrf 参数</span></span><br><span class="line">                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())</span><br><span class="line">                <span class="comment">// 对 instances,actuator url忽略 csrf 验证</span></span><br><span class="line">                .ignoringAntMatchers(</span><br><span class="line">                        adminContextPath + <span class="string">"/instances"</span>,</span><br><span class="line">                        adminContextPath + <span class="string">"/actuator/**"</span></span><br><span class="line">                );</span><br><span class="line">        <span class="comment">// @formatter:on</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>配置默认帐号，密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="comment"># 配置默认用户</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>如果帐号密码是保存在数据库中，配置方式请查看该博客 <a href="https://www.baeldung.com/spring-security-authentication-with-a-database" target="_blank" rel="noopener">使用数据库进行身份认证</a></p><p>重启 <code>server</code> 模块，此次刷新<a href="http://localhost:8090" target="_blank" rel="noopener"> localhost:8090</a> ，会重定向到登录页面，输入配置的默认帐号，密码即可登录</p><p>但是因为 <code>server</code> 端配置了登录验证，所以导致客户端无法注册，此时需要在 <code>client</code> 配置登录 <code>server</code> 所需的帐号与密码</p><p> 配置方式如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># spring-boot-admin 服务端帐号密码</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h5 id="client-端安全配置"><a href="#client-端安全配置" class="headerlink" title="client 端安全配置"></a>client 端安全配置</h5><p><code>client</code> 端主要是保护 <code>management</code> 中开放的 <code>web</code>  端点</p><p>首先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建<code>spring-security</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件中的 management.endpoints.web.base-path 属性值</span></span><br><span class="line"><span class="comment">     * 这里只对 web 端点做登录验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String endpointsBasePath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringSecurityConfig</span><span class="params">(WebEndpointProperties webEndpointProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endpointsBasePath = webEndpointProperties.getBasePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">// web端点需要登录</span></span><br><span class="line">                .antMatchers(endpointsBasePath + <span class="string">"/**"</span>).authenticated()</span><br><span class="line">                <span class="comment">// 其他请求进行忽略</span></span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line">                <span class="comment">// 使用 httpBasic 进行登录验证,这是 spring-boot-admin server 的验证方式</span></span><br><span class="line">                .and().httpBasic()</span><br><span class="line">        <span class="comment">// 如果不配置 formLogin,不会重定向到登录页,因为不需要登录页面</span></span><br><span class="line">        <span class="comment">// .and().formLogin()</span></span><br><span class="line">        ;</span><br><span class="line">        <span class="comment">// 忽略对端点的 csrf 验证,或者直接关闭 csrf,http.csrf().disable();</span></span><br><span class="line">        http.csrf().ignoringAntMatchers(endpointsBasePath + <span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>application.yml</code>配置默认帐号，密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="comment"># 配置默认用户</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>同时为了允许 <code>server</code> 访问 <code>client</code> 的 <code>web</code> 端点，我们在注册时需要提供 <code>client</code> 的帐号与密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">metadata:</span></span><br><span class="line">            <span class="comment"># 配置登录本服务需要的帐号与密码,用于让 spring-boot-admin 登录本服务</span></span><br><span class="line">            <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">            <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br></pre></td></tr></table></figure><h6 id="端点配置"><a href="#端点配置" class="headerlink" title="端点配置"></a>端点配置</h6><p>在演示项目中，我们选择了开放所有端口，为了安全起见，我们应该只开放需要的端口</p><p>其中各个端点的作用请看官网文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html#production-ready-endpoints" target="_blank" rel="noopener">Spring-Boot 端点</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">jmx:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">"*"</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">        <span class="comment"># 排除关闭服务端点</span></span><br><span class="line">        <span class="attr">exclude:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">shutdown</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="comment"># 只有用户登录才显示 health 详情</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">when_authorized</span></span><br><span class="line">    <span class="comment"># 禁用关闭服务端点</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="配置日志文件实时查看"><a href="#配置日志文件实时查看" class="headerlink" title="配置日志文件实时查看"></a>配置日志文件实时查看</h4><p>如果想在 <code>server</code> 查看 <code>client</code> 当前写入的日志文件内容，只需在 <code>client</code> 的配置文件中配置 <code>logging.path</code>或<code>logging.file</code> 属性即可，此时 <code>server</code> 会存在一个 <code>Logfile</code> 的标签，点击该标签即可查看</p><h4 id="配置邮件通知"><a href="#配置邮件通知" class="headerlink" title="配置邮件通知"></a>配置邮件通知</h4><p>首先在<code>server</code>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>邮箱发送相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># 邮箱服务器地址,如QQ邮箱的为 smtp.qq.com,阿里云企业邮箱的为 smtp.qiye.aliyun.com</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.example.com</span></span><br><span class="line">    <span class="comment"># 发件人帐号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">example@example.com</span></span><br><span class="line">    <span class="comment"># 发件人密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">example</span></span><br><span class="line">    <span class="comment"># 邮箱服务器端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="comment"># 邮件协议</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtp</span></span><br><span class="line">    <span class="comment"># 默认字符编码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 测试配置可用性</span></span><br><span class="line">    <span class="attr">test-connection:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果使用加密端口需要添加下面的配置,否则不需要</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>server</code> 发送邮件配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="attr">mail:</span></span><br><span class="line">          <span class="comment"># http://codecentric.github.io/spring-boot-admin/current/#mail-notifications</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 发件人</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">Spring-Boot-Admin</span> <span class="string">&lt;$&#123;spring.mail.username&#125;&gt;</span></span><br><span class="line">          <span class="comment"># 收件人,如果存在多个,使用逗号分隔</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">example@example.com</span></span><br></pre></td></tr></table></figure><p>此时重启 <code>server</code> 端，然后停止 <code>client</code> 端，检查收件箱，可以发现已经接收到下线通知（接受邮件可能存在延迟）</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>在上面的示例中，已经演示了一些基本的配置，而在实际开发中，一般情况下是一个 <code>server</code> 对应多个 <code>client</code>，多个 <code>client</code> 之间注册 <code>server</code> 的配置应该是一样的，此时我们可以选择将一些通用的配置抽取出来，以达到复用的效果</p><p>创建 <code>commons</code> 模块</p><p>在 <code>resources</code> 下创建 <code>config</code> 文件夹，用于存放通用的配置文件</p><p>创建通用邮箱配置文件 <code>application-commons-mail.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment"># 邮箱服务器地址,如QQ邮箱的为 smtp.qq.com,阿里云企业邮箱的为 smtp.qiye.aliyun.com</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.example.com</span></span><br><span class="line">    <span class="comment"># 发件人帐号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">example@example.com</span></span><br><span class="line">    <span class="comment"># 发件人密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">example</span></span><br><span class="line">    <span class="comment"># 邮箱服务器端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="comment"># 邮件协议</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtp</span></span><br><span class="line">    <span class="comment"># 默认字符编码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 测试配置可用性</span></span><br><span class="line">    <span class="attr">test-connection:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 如果使用加密端口需要添加下面的配置,否则不需要</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail.smtp.ssl.enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>创建 <code>client</code> 端默认用户配置文件 <code>application-commons-spring-boot-admin-client-user.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="comment"># 配置默认用户</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>创建 <code>server</code> 端用户及 <code>url</code> 配置文件 <code>application-commons-spring-boot-admin-server.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring-boot-admin:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># spring-boot-admin server 端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">    <span class="comment"># spring-boot-admin server 注册基本地址</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://localhost:$&#123;spring-boot-admin.server.port&#125;</span></span><br><span class="line">    <span class="comment"># spring-boot-admin server 用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="comment"># spring-boot-admin server 密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>创建 <code>client</code> 集成 <code>spring-boot-admin</code> 的通用配置文件 <code>application-commons-spring-boot-admin-client.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">include:</span></span><br><span class="line">      <span class="comment"># 引入前面的俩个配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">commons-spring-boot-admin-client-user</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">commons-spring-boot-admin-server</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment"># 配置文档</span></span><br><span class="line">        <span class="comment"># http://codecentric.github.io/spring-boot-admin/current/#spring-boot-admin-client</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 服务端地址</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">$&#123;spring-boot-admin.server.url&#125;</span></span><br><span class="line">        <span class="comment"># 服务端帐号</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">$&#123;spring-boot-admin.server.username&#125;</span></span><br><span class="line">        <span class="comment"># 服务端密码</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">$&#123;spring-boot-admin.server.password&#125;</span></span><br><span class="line">        <span class="attr">instance:</span></span><br><span class="line">          <span class="attr">metadata:</span></span><br><span class="line">            <span class="comment"># 配置登录本服务需要的帐号与密码,用于让 spring-boot-admin 登录本服务</span></span><br><span class="line">            <span class="attr">user.name:</span> <span class="string">$&#123;spring.security.user.name&#125;</span></span><br><span class="line">            <span class="attr">user.password:</span> <span class="string">$&#123;spring.security.user.password&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">jmx:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">"*"</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">        <span class="comment"># 排除关闭服务端点</span></span><br><span class="line">        <span class="attr">exclude:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">shutdown</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="comment"># 只有用户登录才显示 health 详情</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">when_authorized</span></span><br><span class="line">    <span class="comment"># 禁用关闭服务端点</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>将 <code>client</code> 端的 <code>spring-security</code> 配置类 <code>SpringSecurityConfig</code> 迁移到 <code>commons</code> 模块</p><p>在 <code>client</code> 端的启动类 <code>ClientApplication</code> 上添加一个注解配置 <code>@ImportAutoConfiguration(SpringSecurityConfig.class)</code> 表示应用这个配置类</p><p>修改 <code>client</code> 的配置文件 <code>application.yml</code> 为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 项目名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">include:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">commons-spring-boot-admin-client</span></span><br></pre></td></tr></table></figure><p>修改 <code>server</code> 的配置文件 <code>application.yml</code> 为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 配置服务端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;spring-boot-admin.server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">include:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">commons-mail</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">commons-spring-boot-admin-server</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称,用于与其他应用进行区分</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-admin</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="comment"># 配置默认用户</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;spring-boot-admin.server.username&#125;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">$&#123;spring-boot-admin.server.password&#125;</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="attr">mail:</span></span><br><span class="line">          <span class="comment"># http://codecentric.github.io/spring-boot-admin/current/#mail-notifications</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 发件人</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">Spring-Boot-Admin</span> <span class="string">&lt;$&#123;spring.mail.username&#125;&gt;</span></span><br><span class="line">          <span class="comment"># 收件人,如果存在多个,使用逗号分隔</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">example@example.com</span></span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/ghthou/spring-boot-admin-samples" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;sprin
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://ghthou.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 项目启动异常时使用邮件通知</title>
    <link href="https://ghthou.github.io/2018/09/25/Spring-Boot%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%BC%82%E5%B8%B8%E6%97%B6%E4%BD%BF%E7%94%A8%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/"/>
    <id>https://ghthou.github.io/2018/09/25/Spring-Boot项目启动异常时使用邮件通知/</id>
    <published>2018-09-25T11:16:47.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>在本机进行 Spring Boot 项目开发时，如果启动时出现异常，可以在控制台中明确得知异常相关信息然后进行处理.但在远程的测试、生产服务器中，一般是后台启动或者通过 CI 启动项目，无法直接查看控制台中输出的日志信息. 此时如果启动过程中出现异常我们无法及时得知</p><p>但是通过 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-spring-application.html#boot-features-application-events-and-listeners" target="_blank" rel="noopener">Spring Boot  文档</a>可知, 可以通过监听 <code>ApplicationFailedEvent</code> 事件进行启动异常处理</p><blockquote><p>6 . An <code>ApplicationFailedEvent</code> is sent if there is an exception on startup.</p></blockquote><p>现在我们希望在出现这些异常时, 发送一封邮件到我预定义的邮箱中</p><h4 id="创建邮件工具类"><a href="#创建邮件工具类" class="headerlink" title="创建邮件工具类"></a>创建邮件工具类</h4><p>发送邮件我们使用 <code>spring-boot-starter-mail</code> 提供的 <code>JavaMailSender</code> 接口, 通过配置 <code>spring.mail</code> 系列参数 Spring Boot 会自动创建 <code>JavaMailSender</code> </p><p>但是可能存在发生异常时 <code>JavaMailSender</code> 还没有创建,所以最好是由我们手动创建 <code>JavaMailSender</code> 对象</p><p>以下是发送邮件工具类 <code>EmailUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ghthou.startexceptionnotifications.samples.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.exception.ExceptionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationFailedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PropertiesLoaderUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.ghthou.startexceptionnotifications.samples.properties.NotificationsProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> NotificationsProperties NOTIFICATIONS_PROPERTIES;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> JavaMailSender JAVA_MAIL_SENDER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        NOTIFICATIONS_PROPERTIES = initNotificationsProperties();</span><br><span class="line">        JAVA_MAIL_SENDER = initJavaMailSender();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JavaMailSender <span class="title">initJavaMailSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JavaMailSenderImpl sender = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">        applyProperties(sender);</span><br><span class="line">        <span class="keyword">return</span> sender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applyProperties</span><span class="params">(JavaMailSenderImpl sender)</span> </span>&#123;</span><br><span class="line">        NotificationsProperties properties = NOTIFICATIONS_PROPERTIES;</span><br><span class="line"></span><br><span class="line">        sender.setHost(properties.getHost());</span><br><span class="line">        <span class="keyword">if</span> (properties.getPort() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sender.setPort(properties.getPort());</span><br><span class="line">        &#125;</span><br><span class="line">        sender.setUsername(properties.getUsername());</span><br><span class="line">        sender.setPassword(properties.getPassword());</span><br><span class="line">        sender.setProtocol(properties.getProtocol());</span><br><span class="line">        <span class="keyword">if</span> (properties.getDefaultEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sender.setDefaultEncoding(properties.getDefaultEncoding());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!properties.getProperties().isEmpty()) &#123;</span><br><span class="line">            sender.setJavaMailProperties(asProperties(properties.getProperties()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Properties <span class="title">asProperties</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">for</span> (String pro : StringUtils.split(source, <span class="string">","</span>)) &#123;</span><br><span class="line">            String[] split = StringUtils.split(pro, <span class="string">"="</span>);</span><br><span class="line">            <span class="keyword">if</span> (split.length == <span class="number">2</span>) &#123;</span><br><span class="line">                properties.put(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> NotificationsProperties <span class="title">initNotificationsProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties p = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> ClassPathResource(<span class="string">"notifications.properties"</span>));</span><br><span class="line">        NotificationsProperties notificationsProperties = <span class="keyword">new</span> NotificationsProperties();</span><br><span class="line">        notificationsProperties.setAppName(p.getProperty(<span class="string">"notifications.appName"</span>));</span><br><span class="line">        notificationsProperties.setTo(p.getProperty(<span class="string">"notifications.to"</span>));</span><br><span class="line">        notificationsProperties.setHost(p.getProperty(<span class="string">"notifications.host"</span>));</span><br><span class="line">        notificationsProperties.setPort(Integer.valueOf(p.getProperty(<span class="string">"notifications.port"</span>)));</span><br><span class="line">        notificationsProperties.setProtocol(p.getProperty(<span class="string">"notifications.protocol"</span>));</span><br><span class="line">        notificationsProperties.setUsername(p.getProperty(<span class="string">"notifications.username"</span>));</span><br><span class="line">        notificationsProperties.setPassword(p.getProperty(<span class="string">"notifications.password"</span>));</span><br><span class="line">        notificationsProperties.setDefaultEncoding(p.getProperty(<span class="string">"notifications.defaultEncoding"</span>));</span><br><span class="line">        notificationsProperties.setProperties(p.getProperty(<span class="string">"notifications.properties"</span>));</span><br><span class="line">        <span class="keyword">return</span> notificationsProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JavaMailSender <span class="title">getJavaMailSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JAVA_MAIL_SENDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(SimpleMailMessage simpleMessage)</span> </span>&#123;</span><br><span class="line">        getJavaMailSender().send(simpleMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleMailMessage <span class="title">createSimpleMailMessage</span><span class="params">(ApplicationFailedEvent event)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage simpleMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">// 发件人</span></span><br><span class="line">        simpleMessage.setFrom(MessageFormat.format(<span class="string">"Spring Boot 启动异常 &lt;&#123;0&#125;&gt;"</span>, NOTIFICATIONS_PROPERTIES.getUsername()));</span><br><span class="line">        <span class="comment">// 收件人</span></span><br><span class="line">        simpleMessage.setTo(NOTIFICATIONS_PROPERTIES.getTo());</span><br><span class="line">        <span class="comment">// 主题</span></span><br><span class="line">        simpleMessage.setSubject(MessageFormat.format(<span class="string">"&#123;0&#125; 启动异常"</span>, NOTIFICATIONS_PROPERTIES.getAppName()));</span><br><span class="line">        <span class="comment">// 内容</span></span><br><span class="line">        simpleMessage.setText(ExceptionUtils.getStackTrace(event.getException()));</span><br><span class="line">        <span class="keyword">return</span> simpleMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建启动异常监听器"><a href="#创建启动异常监听器" class="headerlink" title="创建启动异常监听器"></a>创建启动异常监听器</h4><p>然后创建一个 Spring 监听器 <code>StartExceptionNotificationsListener</code>,监听启动异常, 然后判断当前环境,如果不是 <code>dev</code> 环境,进行异常通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ghthou.startexceptionnotifications.samples.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationFailedEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.ghthou.startexceptionnotifications.samples.util.EmailUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartExceptionNotificationsListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationFailedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationFailedEvent event)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = event.getApplicationContext();</span><br><span class="line">        <span class="comment">// 如果不是 dev 环境,因为 dev 环境会查看控制台</span></span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span> || applicationContext.getEnvironment().acceptsProfiles(<span class="string">"!dev"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 进行异常通知</span></span><br><span class="line">            EmailUtils.send(EmailUtils.createSimpleMailMessage(event));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>配置自动注册 <code>StartExceptionNotificationsListener</code></p><p>在 <code>resources/META-INF/spring.factories</code> 中进行以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">com.github.ghthou.startexceptionnotifications.samples.listener.StartExceptionNotificationsListener</span><br></pre></td></tr></table></figure><p>创建用于模拟启动过程中出现异常的启动监听器 <code>ApplicationStartingEventListener</code>,<code>ApplicationEnvironmentPreparedEventListener</code> 等</p><p>然后在 <code>SpringApplication</code> 手动添加这些事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.ghthou.startexceptionnotifications.samples;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartExceptionNotificationsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(StartExceptionNotificationsApplication<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 不触发</span></span><br><span class="line">        <span class="comment">// springApplication.addListeners(new ApplicationStartingEventListener());</span></span><br><span class="line">        <span class="comment">// 触发</span></span><br><span class="line">        <span class="comment">// springApplication.addListeners(new ApplicationEnvironmentPreparedEventListener());</span></span><br><span class="line">        <span class="comment">// 触发</span></span><br><span class="line">        <span class="comment">// springApplication.addListeners(new ApplicationPreparedEventListener());</span></span><br><span class="line">        <span class="comment">// 触发</span></span><br><span class="line">        <span class="comment">// springApplication.addListeners(new ApplicationStartedEventListener());</span></span><br><span class="line">        <span class="comment">// 不触发</span></span><br><span class="line">        <span class="comment">// springApplication.addListeners(new ApplicationReadyEventListener());</span></span><br><span class="line">        springApplication.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>最后通过测试结果可知</p><ul><li style="list-style: none"><input type="checkbox"> ApplicationStartingEvent</li><li style="list-style: none"><input type="checkbox" checked> ApplicationEnvironmentPreparedEvent</li><li style="list-style: none"><input type="checkbox" checked> ApplicationPreparedEvent</li><li style="list-style: none"><input type="checkbox" checked> ApplicationStartedEvent</li><li style="list-style: none"><input type="checkbox"> ApplicationReadyEvent</li></ul><p>三个事件会进行 <code>ApplicationFailedEvent</code> 事件处理, 不过 <code>ApplicationStartingEvent</code> 事件一般不会产生异常, 而 <code>ApplicationReadyEvent</code> 是启动完成后触发的事件</p><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>目前是使用 email 通知, 如果希望使用 短信,微信,钉钉 通知的话, 在 <code>StartExceptionNotificationsListener</code> 中自定义通知处理即可</p><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><p><a href="https://github.com/ghthou/spring-boot-start-exception-notifications-samples" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在本机进行 Spring Boot 项目开发时，如果启动时出现异常，可以在控制台中明确得知异常相关信息然后进行处理.但在远程的测试、生产服务器中，一般是后台启动或者通过 CI 启动项目，无法直接查看控制台中输出的日志信息. 此时如果启动过程中出现异常我们无法及时得知&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Spring Boot" scheme="https://ghthou.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Apache Common Lang 学习之 concurrent 包</title>
    <link href="https://ghthou.github.io/2018/01/14/Apache-Common-Lang-%E5%AD%A6%E4%B9%A0%E4%B9%8B-concurrent-%E5%8C%85/"/>
    <id>https://ghthou.github.io/2018/01/14/Apache-Common-Lang-学习之-concurrent-包/</id>
    <published>2018-01-14T13:14:27.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>标准的 Java 库不能提供足够的方法来操纵其核心类，所以 <a href="http://commons.apache.org/proper/commons-lang/" target="_blank" rel="noopener">Apache Commons Lang</a> 为我们提供了这些额外的方法<br>本文便介绍 <a href="http://commons.apache.org/proper/commons-lang/" target="_blank" rel="noopener">Apache Commons Lang</a> 中 concurrent 包的使用说明</p></blockquote><h1 id="引入-jar-包"><a href="#引入-jar-包" class="headerlink" title="引入 jar 包"></a>引入 jar 包</h1><p>JDK 版本需要大于等于 1.7</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.apache.commons'</span>, <span class="string">name:</span> <span class="string">'commons-lang3'</span>, <span class="string">version:</span> <span class="string">'3.7'</span></span><br></pre></td></tr></table></figure><h1 id="包结构说明"><a href="#包结构说明" class="headerlink" title="包结构说明"></a>包结构说明</h1><h2 id="接口摘要"><a href="#接口摘要" class="headerlink" title="接口摘要"></a>接口摘要</h2><table><thead><tr><th style="text-align:left">Interface</th><th>Description</th></tr></thead><tbody><tr><td style="text-align:left"><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CircuitBreaker.html" target="_blank" rel="noopener">CircuitBreaker</a><t></t></td><td>描述断路器 <a href="http://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker</a> 的接口</td></tr><tr><td style="text-align:left"><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Computable.html" target="_blank" rel="noopener">Computable</a>&lt;I,O&gt;</td><td>为单个参数的计算提供定义一个包装接口,并返回一个结果</td></tr><tr><td style="text-align:left"><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentInitializer.html" target="_blank" rel="noopener">ConcurrentInitializer</a><t></t></td><td>定义线程安全的初始化接口</td></tr></tbody></table><h2 id="类摘要"><a href="#类摘要" class="headerlink" title="类摘要"></a>类摘要</h2><table><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.html" target="_blank" rel="noopener">AbstractCircuitBreaker</a><t></t></td><td>断路器基础类</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicInitializer.html" target="_blank" rel="noopener">AtomicInitializer</a><t></t></td><td><code>ConcurrentInitializer</code> 接口基于 <code>AtomicReference</code> 变量的实现类</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.html" target="_blank" rel="noopener">AtomicSafeInitializer</a><t></t></td><td><code>ConcurrentInitializer</code> 接口基于 <code>AtomicReference</code> 变量的实现类,但是初始化方法 <code>AtomicSafeInitializer.initialize()</code>只会执行一次</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BackgroundInitializer.html" target="_blank" rel="noopener">BackgroundInitializer</a><t></t></td><td><code>ConcurrentInitializer</code> 接口实现类,通过后台线程完成初始化</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BasicThreadFactory.html" target="_blank" rel="noopener">BasicThreadFactory</a></td><td><code>ThreadFactory</code> 接口实现类,提供一些配置获取方法</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BasicThreadFactory.Builder.html" target="_blank" rel="noopener">BasicThreadFactory.Builder</a></td><td><code>BasicThreadFactory</code> 的 <code>Builder</code> 模式实例</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.html" target="_blank" rel="noopener">CallableBackgroundInitializer</a><t></t></td><td><code>BackgroundInitializer</code> 实现类,通过传入 <code>Callable</code>进行实现</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentUtils.html" target="_blank" rel="noopener">ConcurrentUtils</a></td><td>提供 <code>java.util.concurrent</code> 包相关功能的工具类</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConstantInitializer.html" target="_blank" rel="noopener">ConstantInitializer</a><t></t></td><td><code>ConcurrentInitializer</code> 接口实现类,直接返回构造器中传入的参数</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.html" target="_blank" rel="noopener">EventCountCircuitBreaker</a></td><td>计算特定事件的 <a href="http://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker</a> 断路器模式的简单实现</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/LazyInitializer.html" target="_blank" rel="noopener">LazyInitializer</a><t></t></td><td><code>ConcurrentInitializer</code> 接口实现类,通过双重检查锁进行实现</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Memoizer.html" target="_blank" rel="noopener">Memoizer</a>&lt;I,O&gt;</td><td>为单个参数的计算定义一个包装的接口,并返回一个结果</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.html" target="_blank" rel="noopener">MultiBackgroundInitializer</a></td><td><code>BackgroundInitializer</code>实现类,可以在后台进行多个初始化</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.MultiBackgroundInitializerResults.html" target="_blank" rel="noopener">MultiBackgroundInitializer.MultiBackgroundInitializerResults</a></td><td>一个数据类,用于存储<code>MultiBackgroundInitializer</code> 初始化后的结果</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.html" target="_blank" rel="noopener">ThresholdCircuitBreaker</a></td><td>通过给定阈值开启 <a href="http://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker</a> 断路器模式的简单实现</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/TimedSemaphore.html" target="_blank" rel="noopener">TimedSemaphore</a></td><td>一个专门的<em>信号量</em>实现,在给定的时间内提供许可</td></tr></tbody></table><h2 id="枚举摘要"><a href="#枚举摘要" class="headerlink" title="枚举摘要"></a>枚举摘要</h2><table><thead><tr><th>Enum</th><th>Description</th></tr></thead><tbody><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.State.html" target="_blank" rel="noopener">AbstractCircuitBreaker.State</a></td><td>表示断路器不同状态的内部枚举</td></tr></tbody></table><h2 id="异常摘要"><a href="#异常摘要" class="headerlink" title="异常摘要"></a>异常摘要</h2><table><thead><tr><th>Exception</th><th>Description</th></tr></thead><tbody><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CircuitBreakingException.html" target="_blank" rel="noopener">CircuitBreakingException</a></td><td>用于报告与 <a href="http://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker</a> 断路器相关的运行时错误条件的异常类</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentException.html" target="_blank" rel="noopener">ConcurrentException</a></td><td>用于报告与访问后台任务数据相关的错误条件的异常类</td></tr><tr><td><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentRuntimeException.html" target="_blank" rel="noopener">ConcurrentRuntimeException</a></td><td>用于报告与访问后台任务数据有关的<strong>运行时</strong>错误条件的异常类</td></tr></tbody></table><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="CircuitBreaker-及其子类"><a href="#CircuitBreaker-及其子类" class="headerlink" title="CircuitBreaker 及其子类"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CircuitBreaker.html" target="_blank" rel="noopener">CircuitBreaker</a><t> 及其子类</t></h2><h3 id="类层次结构"><a href="#类层次结构" class="headerlink" title="类层次结构"></a>类层次结构</h3><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CircuitBreaker.html" target="_blank" rel="noopener">CircuitBreaker</a><t><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.html" target="_blank" rel="noopener">AbstractCircuitBreaker</a><t><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.html" target="_blank" rel="noopener">EventCountCircuitBreaker</a></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.html" target="_blank" rel="noopener">ThresholdCircuitBreaker</a></li></ul></t></li></ul></t></li></ul><h3 id="类详细介绍"><a href="#类详细介绍" class="headerlink" title="类详细介绍"></a>类详细介绍</h3><h4 id="CircuitBreaker"><a href="#CircuitBreaker" class="headerlink" title="CircuitBreaker"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CircuitBreaker.html" target="_blank" rel="noopener">CircuitBreaker</a><t></t></h4><p>描述断路器的接口</p><p>一个<strong>断路器</strong>可用来防止不可靠的服务或意外负载的应用程序。 它通常监视特定的资源。 只要这个资源按照预期工作，它就处于<strong>关闭</strong>状态，这意味着资源可以被使用。 如果使用该资源时遇到问题时，断路器可以切换到<strong>打开</strong>状态 。 那么访问这个资源是被禁止的。 根据具体的实施方式，当资源再次可用时，断路器可能切换到<strong>关闭</strong>状态。 </p><p>该接口定义了断路器组件的通用协议</p><h4 id="AbstractCircuitBreaker"><a href="#AbstractCircuitBreaker" class="headerlink" title="AbstractCircuitBreaker"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.html" target="_blank" rel="noopener">AbstractCircuitBreaker</a><t></t></h4><p>断路器的基础类，实现了 <code>CircuitBreaker</code> 大部分接口</p><h4 id="EventCountCircuitBreaker"><a href="#EventCountCircuitBreaker" class="headerlink" title="EventCountCircuitBreaker"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.html" target="_blank" rel="noopener">EventCountCircuitBreaker</a></h4><p>计算特定事件的断路器模式的简单实现</p><p>一个<strong>断路器</strong>可用来防止不稳定的服务或遭遇意外高峰负载的应用程序。 新创建的<code>EventCountCircuitBreaker</code>对象最初处于<strong>关闭</strong>状态，意味着没有检测到任何问题。 当应用程序遇到特定事件（如错误或服务超时）时，它会通知断路器增加一个内部计数器。 如果在一个特定的时间间隔中报告的事件的数量超过配置的阈值时，断路器将被<strong>打开</strong>。 这意味着相关的子系统有问题； 应用程序不应该再使用它，而是给它一点时间让它安顿下来。 如果接收的事件数量低于阈值，断路器可以配置为在一定的时间之后切换回<strong>关闭</strong>状态。 </p><p>当一个<code>EventCountCircuitBreaker</code>对象被构造时，可以提供下列参数：</p><ul><li>导致状态转换为打开的事件数量的阈值 。 如果在检查间隔内收到事件的数量等于阈值，则断路器将切换到打开状态。 </li><li>检查断路器是否打开的时间间隔。 所以可以指定 「如果在一分钟内遇到 10 个以上的错误，断路器应该打开」。</li><li>自动关闭断路器的阈值。 如 「如果请求数量降低到每分钟 100 次，断路器应该再次自动关闭」。根据使用情况，关闭断路器的门槛略低于打开门槛，以避免在收到的事件数量接近门槛时连续转换。</li></ul><p>构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// threshold                 改变断路器状态的阈值; 如果在检查间隔内收到的事件数量大于此值,则断路器打开; 如果它低于这个值,它会再次关闭</span></span><br><span class="line"><span class="comment">// checkInterval             打开或关闭断路器的检查间隔</span></span><br><span class="line"><span class="comment">// checkUnit                 checkInterval 的时间单位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventCountCircuitBreaker</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> threshold, <span class="keyword">final</span> <span class="keyword">long</span> checkInterval, <span class="keyword">final</span> TimeUnit checkUnit)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(threshold, checkInterval, checkUnit, threshold);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// openingThreshold        改变断路器状态的阈值; 如果在检查间隔内收到的事件数量大于此值,则断路器打开</span></span><br><span class="line"><span class="comment">// checkInterval        打开或关闭断路器的检查间隔</span></span><br><span class="line"><span class="comment">// checkUnit            checkInterval 的时间单位</span></span><br><span class="line"><span class="comment">// closingThreshold        关闭断路器的阈值; 如果检查间隔内接收的事件数量低于该阈值,则断路器再次关闭</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventCountCircuitBreaker</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> openingThreshold, <span class="keyword">final</span> <span class="keyword">long</span> checkInterval, <span class="keyword">final</span> TimeUnit checkUnit, <span class="keyword">final</span> <span class="keyword">int</span> closingThreshold)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(openingThreshold, checkInterval, checkUnit, closingThreshold, checkInterval, checkUnit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// openingThreshold        改变断路器状态的阈值; 如果在检查间隔内收到的事件数量大于此值,则断路器打开</span></span><br><span class="line"><span class="comment">// openingInterval         打开断路器的检查间隔</span></span><br><span class="line"><span class="comment">// openingUnit            checkInterval 的时间单位</span></span><br><span class="line"><span class="comment">// closingThreshold        关闭断路器的阈值; 如果检查间隔内接收的事件数量低于该阈值,则断路器再次关闭</span></span><br><span class="line"><span class="comment">// closingInterval        关闭断路器的时间间隔</span></span><br><span class="line"><span class="comment">// closingUnit            closingInterval 的时间单位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventCountCircuitBreaker</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> openingThreshold, <span class="keyword">final</span> <span class="keyword">long</span> openingInterval, <span class="keyword">final</span> TimeUnit openingUnit, <span class="keyword">final</span> <span class="keyword">int</span> closingThreshold, <span class="keyword">final</span> <span class="keyword">long</span> closingInterval, <span class="keyword">final</span> TimeUnit closingUnit)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类支持以下典型用例：</p><p><strong>防止负载高峰</strong></p><p>想象一下你有一个服务器可以每分钟处理一定数量的请求。 突然之间，请求数量显著增加，可能是遭到 DDoS（拒绝服务攻击）。 <code>EventCountCircuitBreaker</code> 可以配置为在检测到突然的高峰负载时停止应用程序处理请求，并在事情平静时再开始请求处理。 以下代码片段显示了这种情况的典型示例。 这里<code>EventCountCircuitBreaker</code>在断路器打开之前允许每分钟最多 1000 个请求。 当负载再次下降到每秒 800 个请求时，它会切换回关闭状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">EventCountCircuitBreaker breaker = <span class="keyword">new</span> EventCountCircuitBreaker(<span class="number">1000</span>, <span class="number">1</span>, TimeUnit.MINUTE, <span class="number">800</span>);</span><br><span class="line"><span class="comment">// something</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 将监测值增加 1, 并检查该断路器的当前状态是否关闭</span></span><br><span class="line">    <span class="keyword">if</span> (breaker.incrementAndCheckState()) &#123;</span><br><span class="line">        <span class="comment">//实际上处理这个请求</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//做其他事, 例如发送一个错误代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>处理不稳定的服务</strong></p><p>假如应用程序是一个不稳定的第三方服务。 如果错误太多，服务应被视为关闭，停止服务一段时间。 可以使用以下方式来实现，在这个具体的例子中，我们在 2 分钟内允许 5 个错误； 如果达到这个限制，服务会有 10 分钟的休息时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EventCountCircuitBreaker breaker = <span class="keyword">new</span> EventCountCircuitBreaker(<span class="number">5</span>, <span class="number">2</span>, TimeUnit.MINUTE, <span class="number">5</span>, <span class="number">10</span>, TimeUnit.MINUTE);</span><br><span class="line"><span class="comment">// something</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 检查断路器是否关闭</span></span><br><span class="line">    <span class="keyword">if</span> (breaker.checkState()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.doSomething();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException ex) &#123;</span><br><span class="line">          <span class="comment">// 将监测值增加 1</span></span><br><span class="line">            breaker.incrementAndCheckState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 返回错误代码,或使用替代服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了自动状态转换，断路器的状态可以使用 <code>open()</code>和 <code>close()</code>方法进行手动更改。 同时也可以使用 <code>addChangeListener(final PropertyChangeListener listener)</code> 方法注册监听器，当发生状态转换时，可以得到事件改变对象 <code>PropertyChangeEvent</code>，此时可以根据状态更改的情况做出反应</p><p><em>实现说明：</em></p><ul><li>该实现使用非阻塞算法来更新内部计数器和状态。 如果没有太多的竞争，这应该是非常有效的。 </li><li>这个实现并不打算在非常短的检查间隔中作为高精度定时器来运行。 故意保持简单，以避免复杂和耗时的状态检查。 它应该在几秒到几分钟甚至更长的时间内运行良好。 如果时间间隔太短，可能会因竞争状态导致虚假的状态转换。 </li><li>检查间隔的处理有点简单。 因此，不能保证断路器在特定的时间点被触发； 可能会有一些延迟（小于检查间隔）。 </li></ul><h4 id="ThresholdCircuitBreaker"><a href="#ThresholdCircuitBreaker" class="headerlink" title="ThresholdCircuitBreaker"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.html" target="_blank" rel="noopener">ThresholdCircuitBreaker</a></h4><p>如果请求的次数大于给定阈值，则会打开 <a href="http://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="noopener">Circuit Breaker</a> 模式的简单实现。 </p><p>它包含一个从零开始的内部计数器，每次调用将计数器增加一个给定的数量。 如果阈值是零，断路器将永远处于打开状态。 </p><p>一个内存断路器示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> threshold = <span class="number">10L</span>;</span><br><span class="line">ThresholdCircuitBreaker breaker = <span class="keyword">new</span> ThresholdCircuitBreaker(<span class="number">10L</span>);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> memoryUsed = estimateMemoryUsage(request);</span><br><span class="line">    <span class="keyword">if</span> (breaker.incrementAndCheckState(memoryUsed)) &#123;</span><br><span class="line">        <span class="comment">// 实际上处理这个请求</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 做其他事, 例如发送一个错误代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Computable-lt-I-O-gt-及其子类"><a href="#Computable-lt-I-O-gt-及其子类" class="headerlink" title="Computable&lt;I,O&gt; 及其子类"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Computable.html" target="_blank" rel="noopener">Computable</a>&lt;I,O&gt; 及其子类</h2><h3 id="类层次结构-1"><a href="#类层次结构-1" class="headerlink" title="类层次结构"></a>类层次结构</h3><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Computable.html" target="_blank" rel="noopener">Computable</a>&lt;I,O&gt; <ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Memoizer.html" target="_blank" rel="noopener">Memoizer</a>&lt;I,O&gt;</li></ul></li></ul><h3 id="类详细介绍-1"><a href="#类详细介绍-1" class="headerlink" title="类详细介绍"></a>类详细介绍</h3><h4 id="Computable-lt-I-O-gt"><a href="#Computable-lt-I-O-gt" class="headerlink" title="Computable&lt;I,O&gt;"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Computable.html" target="_blank" rel="noopener">Computable</a>&lt;I,O&gt;</h4><p>为单个参数的计算定义一个包装的接口，并返回一个结果。 </p><h4 id="Memoizer-lt-I-O-gt"><a href="#Memoizer-lt-I-O-gt" class="headerlink" title="Memoizer&lt;I,O&gt;"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/Memoizer.html" target="_blank" rel="noopener">Memoizer</a>&lt;I,O&gt;</h4><p>为单个参数的计算定义一个包装的接口，并返回一个结果。 计算结果将被缓存</p><p>这不是一个全功能的缓存，一旦生成结果，就无法限制或删除结果。 但是，如果在上一次计算过程中抛出错误，则可以通过在构造方法中设置一个选项来实现重新生成给定参数的结果。 如果没有设置或设置为 false，将抛出缓存的异常</p><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memoizer</span>&lt;<span class="title">I</span>, <span class="title">O</span>&gt; <span class="keyword">implements</span> <span class="title">Computable</span>&lt;<span class="title">I</span>, <span class="title">O</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算结果缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;I, Future&lt;O&gt;&gt; cache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">      <span class="comment">// 构造参数中的 Computable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Computable&lt;I, O&gt; computable;</span><br><span class="line">      <span class="comment">// 计算发生异常时是否重算</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> recalculate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 Computable 创建对象</span></span><br><span class="line">      <span class="comment">// 如果在计算过程中发生异常,再次计算时会直接抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memoizer</span><span class="params">(<span class="keyword">final</span> Computable&lt;I, O&gt; computable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(computable, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// recalculate 是否重算</span></span><br><span class="line">      <span class="comment">// 如果为 true, 上次计算发生异常时下次计算时重新计算,否则抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memoizer</span><span class="params">(<span class="keyword">final</span> Computable&lt;I, O&gt; computable, <span class="keyword">final</span> <span class="keyword">boolean</span> recalculate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computable = computable;</span><br><span class="line">        <span class="keyword">this</span>.recalculate = recalculate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算,并根据参数缓存结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> O <span class="title">compute</span><span class="params">(<span class="keyword">final</span> I arg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取缓存结果</span></span><br><span class="line">            Future&lt;O&gt; future = cache.get(arg);</span><br><span class="line">              <span class="comment">// 如果缓存为 null</span></span><br><span class="line">            <span class="keyword">if</span> (future == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">// 创建一个 Callable</span></span><br><span class="line">                <span class="keyword">final</span> Callable&lt;O&gt; eval = <span class="keyword">new</span> Callable&lt;O&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> O <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">                          <span class="comment">// 调用构造参数中的 computable 对 arg 进行计算</span></span><br><span class="line">                        <span class="keyword">return</span> computable.compute(arg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                  <span class="comment">// 创建 FutureTask</span></span><br><span class="line">                <span class="keyword">final</span> FutureTask&lt;O&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(eval);</span><br><span class="line">                  <span class="comment">// 如果 arg 不存在,添加缓存并返回 null,否则返回缓存中的 Future 对象</span></span><br><span class="line">                  <span class="comment">// 此操作是防止 compute 被并发执行</span></span><br><span class="line">                future = cache.putIfAbsent(arg, futureTask);</span><br><span class="line">                  <span class="comment">// 如果缓存添加成功</span></span><br><span class="line">                <span class="keyword">if</span> (future == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    future = futureTask;</span><br><span class="line">                      <span class="comment">// 运行</span></span><br><span class="line">                    futureTask.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 获取缓存的结果</span></span><br><span class="line">                <span class="keyword">return</span> future.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> CancellationException e) &#123;</span><br><span class="line">                cache.remove(arg, future);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ExecutionException e) &#123;</span><br><span class="line">                  <span class="comment">// 如果设置了重新计算</span></span><br><span class="line">                <span class="keyword">if</span> (recalculate) &#123;</span><br><span class="line">                      <span class="comment">// 删除缓存</span></span><br><span class="line">                    cache.remove(arg, future);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> launderException(e.getCause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 异常处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RuntimeException <span class="title">launderException</span><span class="params">(<span class="keyword">final</span> Throwable throwable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">            <span class="keyword">return</span> (RuntimeException) throwable;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> Error) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (Error) throwable;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unchecked exception"</span>, throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ConcurrentInitializer-及其子类"><a href="#ConcurrentInitializer-及其子类" class="headerlink" title="ConcurrentInitializer 及其子类"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentInitializer.html" target="_blank" rel="noopener">ConcurrentInitializer</a><t> 及其子类</t></h2><h3 id="类层次结构-2"><a href="#类层次结构-2" class="headerlink" title="类层次结构"></a>类层次结构</h3><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentInitializer.html" target="_blank" rel="noopener">ConcurrentInitializer</a><t><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicInitializer.html" target="_blank" rel="noopener">AtomicInitializer</a><t></t></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.html" target="_blank" rel="noopener">AtomicSafeInitializer</a><t></t></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConstantInitializer.html" target="_blank" rel="noopener">ConstantInitializer</a><t></t></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/LazyInitializer.html" target="_blank" rel="noopener">LazyInitializer</a><t></t></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BackgroundInitializer.html" target="_blank" rel="noopener">BackgroundInitializer</a><t><ul><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.html" target="_blank" rel="noopener">CallableBackgroundInitializer</a><t></t></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.html" target="_blank" rel="noopener">MultiBackgroundInitializer</a></li></ul></t></li></ul></t></li></ul><h3 id="类详细介绍-2"><a href="#类详细介绍-2" class="headerlink" title="类详细介绍"></a>类详细介绍</h3><p>ConcurrentInitializer 及其子类主要是用来进行数据安全初始化的，开头的 Concurrent 表示支持并发操作</p><p>它只定义了一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="function">T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 <code>get()</code> 方法即可获取完成初始化的对象.同时提供了多种实现，可根据需要进行选择</p><h4 id="ConstantInitializer"><a href="#ConstantInitializer" class="headerlink" title="ConstantInitializer"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConstantInitializer.html" target="_blank" rel="noopener">ConstantInitializer</a><t></t></h4><h5 id="功能描述"><a href="#功能描述" class="headerlink" title="功能描述"></a>功能描述</h5><p>ConstantInitializer 是最简单的 ConcurrentInitializer 实现</p><p>在构造器中传入一个对象，在它的 <code>get()</code> 方法中直接返回这个对象.适用于单元测试及替换其他实现类</p><h5 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T object;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantInitializer</span><span class="params">(<span class="keyword">final</span> T obj)</span> </span>&#123;</span><br><span class="line">        object = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentInitializer&lt;String&gt; initializer = <span class="keyword">new</span> ConstantInitializer&lt;&gt;(<span class="string">"test"</span>);</span><br><span class="line">initializer.get();    <span class="comment">//返回 test</span></span><br></pre></td></tr></table></figure><h4 id="LazyInitializer"><a href="#LazyInitializer" class="headerlink" title="LazyInitializer"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/LazyInitializer.html" target="_blank" rel="noopener">LazyInitializer</a><t></t></h4><h5 id="功能描述-1"><a href="#功能描述-1" class="headerlink" title="功能描述"></a>功能描述</h5><p>顾名思义，使用懒加载的方式进行初始化，只有在第一次调用时才进行初始化操作，通过实现 <code>initialize</code> 方法返回初始化后的对象</p><h5 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h5><p>使用<strong>双重检查锁</strong>进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object NO_INIT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用 volatile 修饰符,保持 object 在多线程情况下的可见性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> T object = (T) NO_INIT;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 创建返回对象,并赋值为 object</span></span><br><span class="line">        T result = object;</span><br><span class="line">        <span class="comment">// 如果 result 等于 NO_INIT, 表明 object 对象未被更改过</span></span><br><span class="line">        <span class="keyword">if</span> (result == NO_INIT) &#123;</span><br><span class="line">              <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                  <span class="comment">// 重新将 object 赋值给 result</span></span><br><span class="line">                result = object;</span><br><span class="line">                  <span class="comment">// 如果 result 依然等于 NO_INIT,表明当前线程是第一个获取到锁的线程</span></span><br><span class="line">                  <span class="comment">// 否者表明在等待获取锁的时间已经有其他线程对 result 进行了更改</span></span><br><span class="line">                <span class="keyword">if</span> (result == NO_INIT) &#123;</span><br><span class="line">                      <span class="comment">// 调用子类的 initialize 方法并赋值给 result,object</span></span><br><span class="line">                    object = result = initialize();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentInitializer&lt;Properties&gt; initializer = <span class="keyword">new</span> LazyInitializer&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Properties <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">initializer.get();</span><br></pre></td></tr></table></figure><h4 id="AtomicInitializer"><a href="#AtomicInitializer" class="headerlink" title="AtomicInitializer"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicInitializer.html" target="_blank" rel="noopener">AtomicInitializer</a><t></t></h4><h5 id="功能描述-2"><a href="#功能描述-2" class="headerlink" title="功能描述"></a>功能描述</h5><p>与 LazyInitializer 功能，用法一致，不过实现方式不同，同时其 <code>initialize</code> 方法会存在调用多次的问题</p><h5 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h5><p>使用 <strong>CAS</strong> 方式进行实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化一个 AtomicReference 对象,可以以原子方式更新对象引用</span></span><br><span class="line">      <span class="comment">// 默认引用值为 null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;T&gt; reference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">          <span class="comment">// 获取引用值</span></span><br><span class="line">        T result = reference.get();</span><br><span class="line">        <span class="comment">// 如果为 null,表明对象引用未被设置</span></span><br><span class="line">          <span class="comment">// 否者表明该对象引用已经被设置,即被初始化</span></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 调用 initialize 进行初始化</span></span><br><span class="line">              <span class="comment">// 假如多个线程同时执行到这一步,会导致 initialize 方法被调用多次</span></span><br><span class="line">            result = initialize();</span><br><span class="line">              <span class="comment">// 使用 CAS 的方式修改引用值,该应用旧值为 null,新值为初始化后返回的 result</span></span><br><span class="line">              <span class="comment">// 如果更新成功,直接返回 result 对象</span></span><br><span class="line">            <span class="keyword">if</span> (!reference.compareAndSet(<span class="keyword">null</span>, result)) &#123;</span><br><span class="line">                <span class="comment">// 如果更新失败,表示有其他线程更新成功,通过 reference.get() 方法可获取其他线程设置的值</span></span><br><span class="line">                result = reference.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentInitializer&lt;Properties&gt; initializer = <span class="keyword">new</span> AtomicInitializer&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Properties <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">initializer.get();</span><br></pre></td></tr></table></figure><h4 id="AtomicSafeInitializer"><a href="#AtomicSafeInitializer" class="headerlink" title="AtomicSafeInitializer"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/AtomicSafeInitializer.html" target="_blank" rel="noopener">AtomicSafeInitializer</a><t></t></h4><h5 id="功能描述-3"><a href="#功能描述-3" class="headerlink" title="功能描述"></a>功能描述</h5><p>AtomicInitializer 存在一个 <code>initialize</code> 执行多次的问题.而 AtomicSafeInitializer 则是为了解决这个问题而诞生，使用它，<code>initialize</code> 只会被执行一次</p><h5 id="源码分析-4"><a href="#源码分析-4" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicSafeInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 一个 AtomicReference 变量,用于保证 initialize 只会被调用一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;AtomicSafeInitializer&lt;T&gt;&gt; factory = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;T&gt; reference = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">        T result;</span><br><span class="line">        <span class="comment">// 获取引用</span></span><br><span class="line">          <span class="comment">// 如果引用为 null,进入初始化步骤</span></span><br><span class="line">        <span class="keyword">while</span> ((result = reference.get()) == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 操作 factory 更新引用,在多线程的情况下,只有一个线程能执行成功</span></span><br><span class="line">              <span class="comment">// 如果更新成功,当前线程进行初始化,并将返回结果设置为 reference 的引用</span></span><br><span class="line">              <span class="comment">// 如果更新失败,在 while 中重新获取 reference 的引用,直到更新成功的那个线程为 reference 设置新值</span></span><br><span class="line">            <span class="keyword">if</span> (factory.compareAndSet(<span class="keyword">null</span>, <span class="keyword">this</span>)) &#123;</span><br><span class="line">                reference.set(initialize());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentInitializer&lt;Properties&gt; initializer = <span class="keyword">new</span> AtomicSafeInitializer&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Properties <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">initializer.get();</span><br></pre></td></tr></table></figure><h4 id="BackgroundInitializer"><a href="#BackgroundInitializer" class="headerlink" title="BackgroundInitializer "></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BackgroundInitializer.html" target="_blank" rel="noopener">BackgroundInitializer</a> <t></t></h4><h5 id="功能描述-4"><a href="#功能描述-4" class="headerlink" title="功能描述"></a>功能描述</h5><p>使用后台线程进行初始化，在创建对象后需要先执行 <code>start()</code> 保证后台线程运行，再调用 <code>get()</code> 方法</p><p>默认<code>Executors.newFixedThreadPool(1)</code> 创建一个线程数量为 1 的线程池，在 <code>initialize</code> 方法执行完成之后对线程池进行关闭</p><p>同时提供一个 <code>protected BackgroundInitializer(final ExecutorService exec) {}</code> 构造器方法，此时使用传入的 <code>ExecutorService</code> 对象执行 <code>initialize</code> 方法，执行完成后不会该关闭线程池</p><h5 id="源码分析-5"><a href="#源码分析-5" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ConcurrentInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 构造器传入的 ExecutorService 对象</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService externalExecutor; </span><br><span class="line">    <span class="comment">// 默认生成的 ExecutorService 对象</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor; </span><br><span class="line">    <span class="comment">// 异步计算的结果</span></span><br><span class="line">    <span class="keyword">private</span> Future&lt;T&gt; future;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BackgroundInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ExecutorService 参数构造器,使用传入的 ExecutorService 执行 initialize</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BackgroundInitializer</span><span class="params">(<span class="keyword">final</span> ExecutorService exec)</span> </span>&#123;</span><br><span class="line">        setExternalExecutor(exec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断后台线程是否运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> future != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 后台线程是否启动</span></span><br><span class="line">        <span class="keyword">if</span> (!isStarted()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义一个临时线程池变量</span></span><br><span class="line">            ExecutorService tempExec;</span><br><span class="line">              <span class="comment">// 获取构造器传入的 ExecutorService 对象</span></span><br><span class="line">            executor = getExternalExecutor();</span><br><span class="line">              <span class="comment">// 如果 executor 为 null,使用无参构造器创建 BackgroundInitializer</span></span><br><span class="line">            <span class="keyword">if</span> (executor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  <span class="comment">// 创建一个线程数量为1的线程池对象,在使用完成后进行关闭</span></span><br><span class="line">                executor = tempExec = createExecutor();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tempExec = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 后台执行初始化</span></span><br><span class="line">            future = executor.submit(createTask(tempExec));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取初始化结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getFuture().get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ExecutionException execex) &#123;</span><br><span class="line">            ConcurrentUtils.handleCause(execex);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> InterruptedException iex) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentException(iex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Future&lt;T&gt; <span class="title">getFuture</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (future == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"start() must be called first!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Callable&lt;T&gt; <span class="title">createTask</span><span class="params">(<span class="keyword">final</span> ExecutorService execDestroy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitializationTask(execDestroy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ExecutorService <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Executors.newFixedThreadPool(getTaskCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InitializationTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService execFinally;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// ExecutorService 参数构造器,用来关闭默认创建的 ExecutorService 对象</span></span><br><span class="line">        InitializationTask(<span class="keyword">final</span> ExecutorService exec) &#123;</span><br><span class="line">            execFinally = exec;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 执行子类初始化方法</span></span><br><span class="line">                <span class="keyword">return</span> initialize();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  <span class="comment">// 如果构造参数中的 ExecutorService 不为 null,进行关闭</span></span><br><span class="line">                  <span class="comment">// 只有使用 BackgroundInitializer() 创建对象才存在这种情况</span></span><br><span class="line">                <span class="keyword">if</span> (execFinally != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    execFinally.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BackgroundInitializer&lt;Properties&gt; initializer = <span class="keyword">new</span> BackgroundInitializer&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Properties <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> ConcurrentException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">initializer.start();</span><br><span class="line">initializer.get();</span><br></pre></td></tr></table></figure><h4 id="CallableBackgroundInitializer"><a href="#CallableBackgroundInitializer" class="headerlink" title="CallableBackgroundInitializer "></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/CallableBackgroundInitializer.html" target="_blank" rel="noopener">CallableBackgroundInitializer</a> <t></t></h4><h5 id="功能描述-5"><a href="#功能描述-5" class="headerlink" title="功能描述"></a>功能描述</h5><p>BackgroundInitializer 的子类，使用方式为在构造器中传入一个 <code>Callable</code> 对象，在初始化时调用该参数的 <code>call()</code> 方法</p><h5 id="源码分析-6"><a href="#源码分析-6" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableBackgroundInitializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BackgroundInitializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 构造参数中的 Callable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Callable&lt;T&gt; callable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableBackgroundInitializer</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; call)</span> </span>&#123;</span><br><span class="line">        checkCallable(call);</span><br><span class="line">        callable = call;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CallableBackgroundInitializer</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; call, <span class="keyword">final</span> ExecutorService exec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(exec);</span><br><span class="line">        checkCallable(call);</span><br><span class="line">        callable = call;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> callable.call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkCallable</span><span class="params">(<span class="keyword">final</span> Callable&lt;T&gt; call)</span> </span>&#123;</span><br><span class="line">        Validate.isTrue(call != <span class="keyword">null</span>, <span class="string">"Callable must not be null!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BackgroundInitializer&lt;Properties&gt; initializer = <span class="keyword">new</span> CallableBackgroundInitializer&lt;&gt;(<span class="keyword">new</span> Callable&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Properties <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">initializer.start();</span><br><span class="line">initializer.get();</span><br></pre></td></tr></table></figure><h4 id="MultiBackgroundInitializer"><a href="#MultiBackgroundInitializer" class="headerlink" title="MultiBackgroundInitializer"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/MultiBackgroundInitializer.html" target="_blank" rel="noopener">MultiBackgroundInitializer</a></h4><h5 id="功能描述-6"><a href="#功能描述-6" class="headerlink" title="功能描述"></a>功能描述</h5><p>BackgroundInitializer 多后台任务的实现，通过该类，可以并行执行多个 BackgroundInitializer</p><h5 id="源码分析-7"><a href="#源码分析-7" class="headerlink" title="源码分析"></a>源码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiBackgroundInitializer</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">BackgroundInitializer</span>&lt;<span class="title">MultiBackgroundInitializer</span>.<span class="title">MultiBackgroundInitializerResults</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 需要执行的多个 BackgroundInitializer Map, String 为 BackgroundInitializer 的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BackgroundInitializer&lt;?&gt;&gt; childInitializers =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiBackgroundInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiBackgroundInitializer</span><span class="params">(<span class="keyword">final</span> ExecutorService exec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(exec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个需要执行的 BackgroundInitializer</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInitializer</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> BackgroundInitializer&lt;?&gt; init)</span> </span>&#123;</span><br><span class="line">        Validate.isTrue(name != <span class="keyword">null</span>, <span class="string">"Name of child initializer must not be null!"</span>);</span><br><span class="line">        Validate.isTrue(init != <span class="keyword">null</span>, <span class="string">"Child initializer must not be null!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isStarted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">"addInitializer() must not be called after start()!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            childInitializers.put(name, init);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回默认线程池的构建数量</span></span><br><span class="line">      <span class="comment">// 默认情况下所有 BackgroundInitializer 与 MultiBackgroundInitializer 共享同一个线程池</span></span><br><span class="line">      <span class="comment">// 数量为 1 + 所有 BackgroundInitializer 的数量</span></span><br><span class="line">      <span class="comment">// 1 为 MultiBackgroundInitializer 后台执行的线程数</span></span><br><span class="line">      <span class="comment">// 理论上所有的 BackgroundInitializer 都是并行执行,不需要等待其他对象初始化完毕</span></span><br><span class="line">      <span class="comment">// 但是在构造参数中传入 ExecutorService 例外</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getTaskCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> BackgroundInitializer&lt;?&gt; bi : childInitializers.values()) &#123;</span><br><span class="line">            result += bi.getTaskCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多任务的初始化方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MultiBackgroundInitializerResults <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;String, BackgroundInitializer&lt;?&gt;&gt; inits;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 创建一个 childInitializers 对象快照</span></span><br><span class="line">            inits = <span class="keyword">new</span> HashMap&lt;&gt;(</span><br><span class="line">                    childInitializers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动所有的 BackgroundInitializer</span></span><br><span class="line">        <span class="keyword">final</span> ExecutorService exec = getActiveExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> BackgroundInitializer&lt;?&gt; bi : inits.values()) &#123;</span><br><span class="line">              <span class="comment">// 如果 BackgroundInitializer 没有外部 ExecutorService</span></span><br><span class="line">            <span class="keyword">if</span> (bi.getExternalExecutor() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 使用 MultiBackgroundInitializer 默认的 ExecutorService</span></span><br><span class="line">                bi.setExternalExecutor(exec);</span><br><span class="line">            &#125;</span><br><span class="line">            bi.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BackgroundInitializer 名称与初始化值 Map</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; results = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">          <span class="comment">// BackgroundInitializer 名称与异常 Map</span></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, ConcurrentException&gt; excepts = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Map.Entry&lt;String, BackgroundInitializer&lt;?&gt;&gt; e : inits.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                results.put(e.getKey(), e.getValue().get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ConcurrentException cex) &#123;</span><br><span class="line">                excepts.put(e.getKey(), cex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建多 BackgroundInitializer 结果对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiBackgroundInitializerResults(inits, results, excepts);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多 BackgroundInitializer 结果对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiBackgroundInitializerResults</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BackgroundInitializer&lt;?&gt;&gt; initializers;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; resultObjects;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ConcurrentException&gt; exceptions;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MultiBackgroundInitializerResults</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Map&lt;String, BackgroundInitializer&lt;?&gt;&gt; inits,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Map&lt;String, Object&gt; results,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">final</span> Map&lt;String, ConcurrentException&gt; excepts)</span> </span>&#123;</span><br><span class="line">            initializers = inits;</span><br><span class="line">            resultObjects = results;</span><br><span class="line">            exceptions = excepts;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> BackgroundInitializer&lt;?&gt; getInitializer(<span class="keyword">final</span> String name) &#123;</span><br><span class="line">            <span class="keyword">return</span> checkName(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getResultObject</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">            checkName(name);</span><br><span class="line">            <span class="keyword">return</span> resultObjects.get(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isException</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">            checkName(name);</span><br><span class="line">            <span class="keyword">return</span> exceptions.containsKey(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ConcurrentException <span class="title">getException</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">            checkName(name);</span><br><span class="line">            <span class="keyword">return</span> exceptions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">initializerNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.unmodifiableSet(initializers.keySet());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 是否全部成功</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSuccessful</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> exceptions.isEmpty();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> BackgroundInitializer&lt;?&gt; checkName(<span class="keyword">final</span> String name) &#123;</span><br><span class="line">            <span class="keyword">final</span> BackgroundInitializer&lt;?&gt; init = initializers.get(name);</span><br><span class="line">            <span class="keyword">if</span> (init == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(</span><br><span class="line">                        <span class="string">"No child initializer with name "</span> + name);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> init;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MultiBackgroundInitializer initializer = <span class="keyword">new</span> MultiBackgroundInitializer();</span><br><span class="line">initializer.addInitializer(<span class="string">"loadProperties1"</span>, <span class="keyword">new</span> BackgroundInitializer&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Properties <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties1();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">initializer.addInitializer(<span class="string">"loadProperties2"</span>, <span class="keyword">new</span> CallableBackgroundInitializer&lt;Properties&gt;(<span class="keyword">new</span> Callable&lt;Properties&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Properties <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> loadProperties2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;));</span><br><span class="line">initializer.start();</span><br><span class="line">MultiBackgroundInitializer.MultiBackgroundInitializerResults results = initializer.get();</span><br><span class="line"><span class="keyword">if</span> (results.isSuccessful()) &#123;</span><br><span class="line">  results.getResultObject(<span class="string">"loadProperties1"</span>);</span><br><span class="line">  results.getResultObject(<span class="string">"loadProperties2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用选择"><a href="#使用选择" class="headerlink" title="使用选择"></a>使用选择</h3><p>如果初始化程序执行时间过长且不希望在第一次调用时等待太久请选择 <code>BackgroundInitializer</code> 与 <code>CallableBackgroundInitializer</code></p><p>否则使用 <code>LazyInitializer</code> 与 <code>AtomicSafeInitializer</code></p><h2 id="BasicThreadFactory"><a href="#BasicThreadFactory" class="headerlink" title="BasicThreadFactory"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/BasicThreadFactory.html" target="_blank" rel="noopener">BasicThreadFactory</a></h2><p><code>ThreadFactory</code> 接口的实现，，提供一些配置获取方法</p><p><code>ThreadFactory</code> 用于 <code>ExecutorService</code> 创建执行任务的线程。 在许多情况下，用户并不关心，因为 <code>ExecutorService</code> 会使用一个默认的 <code>ThreadFactory</code>  。 但是，如果对线程有特殊要求，则必须创建一个自定义的<code>ThreadFactory</code></p><p>这个类为它创建的线程提供了一些经常需要的配置选项，这些是：</p><ul><li><code>namingPattern</code> 线程的名称模式。 如果希望日志输出或异常跟踪更容易阅读，可以为线程起一个有意义的名称。 在线程命名时使用 <code>thread.setName(String.format(namingPattern, count));</code> 方式，<code>count</code> 即线程池当前创建的线程数量，从 1 开始。  <code>namingPattern</code> 中的 <code>%d</code> 会被替换为 <code>count</code> 。 如 ： <code>namingPattern</code> 为 <code>&quot;My %d. worker thread&quot;</code>，那么生成的线程名称为 <code>&quot;My 1. worker thread&quot;</code>，<code>&quot;My 2. worker thread&quot;</code> </li><li><code>daemonFlag</code> 守护线程标志。 该工厂创建的线程是否是守护线程。 这会影响当前 Java 应用程序的退出行为，当正在运行的线程都是守护线程时，Java 虚拟机将退出，默认为 false ，即用户线程</li><li><code>priority</code> 线程的优先级.  <code>Integer</code> 类型,值区间为 <strong>[1,10]</strong></li><li><code>uncaughtExceptionHandler</code> 线程由于未捕获到异常而突然终止时调用的处理程序。 如果线程内发生未捕获的异常，则调用此处理程序</li></ul><p><code>BasicThreadFactory</code>不是直接创建实例，而是使用内部类 <code>Builder</code>类实现此目的，使用 <code>Builder</code> 只需要设置应用程序感兴趣的配置选项。 以下示例显示了 <code>BasicThreadFactory</code>是如何创建并配置在在<code>ExecutorService</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个线程工厂,配置名称模式,守护线程标志,优先级</span></span><br><span class="line">BasicThreadFactory factory = <span class="keyword">new</span> BasicThreadFactory.Builder()</span><br><span class="line">    .namingPattern(<span class="string">"workerthread-%d"</span>)</span><br><span class="line">    .daemon(<span class="keyword">true</span>)</span><br><span class="line">    .priority(Thread.MAX_PRIORITY)</span><br><span class="line">    .build();</span><br><span class="line"><span class="comment">// 创建一个单线程的线程池,指定 factory 为线程工厂</span></span><br><span class="line">ExecutorService exec = Executors.newSingleThreadExecutor(factory);</span><br></pre></td></tr></table></figure><h2 id="ConcurrentUtils"><a href="#ConcurrentUtils" class="headerlink" title="ConcurrentUtils"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/ConcurrentUtils.html" target="_blank" rel="noopener">ConcurrentUtils</a></h2><p>提供 <code>java.util.concurrent</code> 包相关功能的工具方法</p><p>该类涉及到 <code>ConcurrentException</code> 的方法存在一个 <code>原方法名+Unchecked</code> 的相同功能方法，用于将受检异常 <code>ConcurrentException</code> 转换为运行时异常 <code>ConcurrentRuntimeException</code></p><p>用法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;Object&gt; future = ...;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  Object result = future.get();</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException eex) &#123;</span><br><span class="line">  ConcurrentUtils.handleCause(eex);</span><br><span class="line">  <span class="comment">// ConcurrentUtils.handleCauseUnchecked(eex);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h3><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>static &lt;T&gt; Future&lt;T&gt;</code></td><td><code>constantFuture(T value)</code><br>创建一个已完成的 <code>Future</code> ,该  <code>Future</code> 的返回值及参数中的 <code>T value</code></td></tr><tr><td><code>static &lt;K,V&gt; V</code></td><td><code>createIfAbsent(ConcurrentMap&lt;K,V&gt; map, K key, ConcurrentInitializer&lt;V&gt; init)</code><br>检查 <code>ConcurrentMap</code> 是否包含 <code>key</code>,如果未包含,为 <code>ConcurrentMap</code> 设置 <code>key</code> : <code>init.get()</code></td></tr><tr><td><code>static &lt;K,V&gt; V</code></td><td><code>createIfAbsentUnchecked(ConcurrentMap&lt;K,V&gt; map, K key, ConcurrentInitializer&lt;V&gt; init)</code><br><code>createIfAbsent</code> 的非受检异常版本</td></tr><tr><td><code>static ConcurrentException</code></td><td><code>extractCause(ExecutionException ex)</code><br><code>ExecutionException</code> 异常原因转换, <code>RuntimeException</code> 与 <code>Error</code> 进行抛出,否则转换为受检异常 <code>ConcurrentException</code> 并返回</td></tr><tr><td><code>static ConcurrentRuntimeException</code></td><td><code>extractCauseUnchecked(ExecutionException ex)</code><br><code>extractCause</code> 的非受检异常版本</td></tr><tr><td><code>static void</code></td><td><code>handleCause(ExecutionException ex)</code><br><code>ExecutionException</code> 异常处理,<code>RuntimeException</code> 与 <code>Error</code> 进行抛出,否则转换为 <code>ConcurrentException</code> 在进行抛出</td></tr><tr><td><code>static void</code></td><td><code>handleCauseUnchecked(ExecutionException ex)</code><br><code>handleCauseUnchecked</code> 的非受检异常版本</td></tr><tr><td><code>static &lt;T&gt; T</code></td><td><code>initialize(ConcurrentInitializer&lt;T&gt; initializer)</code><br>获取 <code>initializer</code> 的初始化返回值</td></tr><tr><td><code>static &lt;T&gt; T</code></td><td><code>initializeUnchecked(ConcurrentInitializer&lt;T&gt; initializer)</code><br><code>initialize</code> 的非受检异常版本</td></tr><tr><td><code>static &lt;K,V&gt; V</code></td><td><code>putIfAbsent(ConcurrentMap&lt;K,V&gt; map, K key, V value)</code><br>检查 <code>ConcurrentMap</code> 是否包含 <code>key</code>,如果未包含,为 <code>ConcurrentMap</code> 设置 <code>key</code> : <code>value</code></td></tr></tbody></table><h2 id="TimedSemaphore"><a href="#TimedSemaphore" class="headerlink" title="TimedSemaphore"></a><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/org/apache/commons/lang3/concurrent/TimedSemaphore.html" target="_blank" rel="noopener">TimedSemaphore</a></h2><p>一个专门的信号量实现，在给定的时间内提供许可，到期自动释放</p><p>该类的功能与 <code>java.util.concurrent.Semaphore</code> 有点类似，通过调用 <code>acquire()</code> 方法获取许可，但是没有提供 <code>release()</code> 方法进行许可释放，因为它会在时间到期后释放所有的许可</p><p>如果在许可已经用尽的情况下调用<code>acquire()</code>，那么当前线程会一直阻塞，直到时间到期，所有许可被释放.此时再重新获取许可.这意味着可以在<strong>规定的时间范围内，限制给定操作的次数</strong></p><p>用法示例</p><p>假如存在一个通过后台线程查询数据库以进行收集统计信息的应用程序.这种后台处理不应该对数据库产生太多负载，防止影响系统的功能和性能.所以可以使用 <code>TimedSemaphore</code> 来限制该线程每秒只能发出一定数量的数据库查询</p><p>执行查询的线程类伪代码可能如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 限制数据库查询次数的 semaphore 对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimedSemaphore semaphore;</span><br><span class="line">    <span class="comment">// 创建一个线程实例并设置 semaphore 对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StatisticsThread</span><span class="params">(TimedSemaphore timedSemaphore)</span> </span>&#123;</span><br><span class="line">        semaphore = timedSemaphore;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 收集统计信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                semaphore.acquire();   <span class="comment">// 限制数据库查询</span></span><br><span class="line">                performQuery();        <span class="comment">// 发出查询</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(InterruptedException) &#123;</span><br><span class="line">            <span class="comment">// fall through</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码片段显示了如何创建一个每秒只允许 10 次的 <code>TimedSemaphore</code> 并传递给统计线程 <code>StatisticsThread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimedSemaphore sem = <span class="keyword">new</span> TimedSemaphore(<span class="number">1</span>, TimeUnit.SECONDS, <span class="number">10</span>);</span><br><span class="line">StatisticsThread thread = <span class="keyword">new</span> StatisticsThread(sem);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><p>构造方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// timePeriod             时间段</span></span><br><span class="line"><span class="comment">// timeUnit        时间单位,如 SECONDS 秒,MILLISECONDS 毫秒,MINUTES 分</span></span><br><span class="line"><span class="comment">// limit         许可数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimedSemaphore</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> timePeriod, <span class="keyword">final</span> TimeUnit timeUnit, <span class="keyword">final</span> <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// service        延迟线程池,会使用该线程池创建释放许可的周期任务</span></span></span><br><span class="line"><span class="function"><span class="comment">// timePeriod             时间段</span></span></span><br><span class="line"><span class="function"><span class="comment">// timeUnit        时间单位,如 SECONDS 秒,MILLISECONDS 毫秒,MINUTES 分</span></span></span><br><span class="line"><span class="function"><span class="comment">// limit         许可数量</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TimedSemaphore</span><span class="params">(<span class="keyword">final</span> ScheduledExecutorService service, <span class="keyword">final</span> <span class="keyword">long</span> timePeriod,<span class="keyword">final</span> TimeUnit timeUnit, <span class="keyword">final</span> <span class="keyword">int</span> limit)</span></span></span><br></pre></td></tr></table></figure><p>所以 <code>new TimedSemaphore(1, TimeUnit.SECOND, 10);</code>  含义是在 <code>timePeriod(1) * timeUnit(TimeUnit.SECOND) = 1秒</code> 的时间内只发放 <code>limit(10)</code> 个许可</p><p>在使用时需要在限制操作前调用 <code>acquire()</code>方法。 <code>TimedSemaphore</code> 会统计调用 <code>acquire()</code> 的次数，并在许可达到上限后阻塞当前线程，直到时间周期结束后释放所有许可，此时再进行许可获取</p><p>另外提供 <code>tryAcquire()</code> 方法，该方法尝试获取许可，如果获取成功，返回<code>true</code>，否者返回<code>false</code> ，使用这种方法不会造成当前线程的阻塞</p><p>同时在运行过程中你可以随时调用 <code>setLimit(final int limit)</code> 修改许可数量。 如果一个操作的次数限制需要动态调整，比如白天减少许可，晚上增加许可。 如果设置的许可小于原本许可，那么会立即生效，但是设置的许可大于原来的许可，阻塞的线程依然阻塞，直到所有许可释放，阻塞的线程被唤醒.此时按照新设置的许可进行处理.如果许可数量设置小于等于 0，那么 <code>acquire()</code> 操作不会阻塞，直接放行</p><p>当<code>TimedSemaphore</code> 不需要时，可以调用 <code>shutdown()</code> 方法，该方法会取消释放所有许可的周期任务，如果执行周期任务的 <code>ScheduledExecutorService</code> 不是外部传入，同时也会结束该线程池</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="http://commons.apache.org/proper/commons-lang/" target="_blank" rel="noopener">Apache Commons Lang</a></li><li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html" target="_blank" rel="noopener">Apache Commons Lang Javadoc </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;标准的 Java 库不能提供足够的方法来操纵其核心类，所以 &lt;a href=&quot;http://commons.apache.org/proper/commons-lang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apache
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Common Lang" scheme="https://ghthou.github.io/tags/Common-Lang/"/>
    
      <category term="源码研究" scheme="https://ghthou.github.io/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 使用 FindBugs 进行代码分析</title>
    <link href="https://ghthou.github.io/2018/01/13/IntelliJ-IDEA-%E4%BD%BF%E7%94%A8-FindBugs-%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://ghthou.github.io/2018/01/13/IntelliJ-IDEA-使用-FindBugs-进行代码分析/</id>
    <published>2018-01-13T05:17:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FindBugs-介绍"><a href="#FindBugs-介绍" class="headerlink" title="FindBugs 介绍"></a><a href="http://findbugs.sourceforge.net/" target="_blank" rel="noopener">FindBugs</a> 介绍</h3><p>FindBugs 是一个使用静态分析来 <strong> 查找 Java 代码中的错误 </strong> 的程序。它是免费软件<br>当前版本的 FindBugs 是 3.0.1<br><strong>FindBugs 运行需要 1.7 或更高版本的 JRE（或 JDK）</strong>。但是，它可以分析从任何版本的 Java 编译的程序，从 1.0 到 1.8</p><p>以上是来自官网的介绍，核心内容为查找 Java 代码中的错误</p><h3 id="IntelliJ-IDEA-安装-FindBugs-插件"><a href="#IntelliJ-IDEA-安装-FindBugs-插件" class="headerlink" title="IntelliJ IDEA 安装 FindBugs 插件"></a>IntelliJ IDEA 安装 FindBugs 插件</h3><ul><li><code>Ctrl+Alt+S</code> 快捷键打开设置选项</li><li>选择 <code>Plugins</code></li><li>点击底部 <code>Browse repositories</code> 按钮打开插件中心</li><li>在输入框搜索 <code>findbugs</code></li><li>选择 <code>FindBugs-IDEA</code></li><li>此时右边红框位置会有一个绿色的 <code>Install</code> 按钮 （下面这张图是已经安装的情况），点击安装即可，安装完成后需要重启 IDEA<br><img src="/images/IntelliJ-IDEA-使用-FindBugs-进行代码分析/IDEA安装FindBugs插件.png" alt="IDEA 安装 FindBugs 插件"></li></ul><h3 id="FindBugs-IDEA-插件使用介绍"><a href="#FindBugs-IDEA-插件使用介绍" class="headerlink" title="FindBugs-IDEA 插件使用介绍"></a><a href="http://andrepdo.github.io/findbugs-idea/" target="_blank" rel="noopener">FindBugs-IDEA</a> 插件使用介绍</h3><ul><li><code>Ctrl+Shift+A</code> 快捷键打开 Find Action 搜索面板</li><li>在搜索框输入 <code>findbugs</code> 进行搜索</li><li>点击下方红框的 <code>FindBugs-IDEA</code> 即可打开插件面板<br><img src="/images/IntelliJ-IDEA-使用-FindBugs-进行代码分析/打开FindBugs插件.png" alt="打开 FindBugs 插件"><br>插件面板按钮说明<br><img src="/images/IntelliJ-IDEA-使用-FindBugs-进行代码分析/FindBugs面板.png" alt="FindBugs 面板"></li></ul><ol><li>分析选中的 Java 文件</li><li>分析在光标所在的类</li><li>分析选中的包</li><li>分析选中的模块 （点击时会询问是否同时分析 test 包中的类）</li><li>分析整个项目 （点击时会询问是否同时分析 test 包中的类）</li><li>自定义分析的类</li><li>分析被修改的类 （搭配 SVN，Git 使用）</li><li>分析 changelist 中的类 （搭配 SVN，Git 使用）</li><li>停止分析</li><li>根据 BUG 类型分组</li><li>根据类分组</li><li>根据包分组</li><li>根据 BUG 严重级别分组</li></ol><h3 id="FindBugs-IDEA-插件使用示例"><a href="#FindBugs-IDEA-插件使用示例" class="headerlink" title="FindBugs-IDEA 插件使用示例"></a>FindBugs-IDEA 插件使用示例</h3><p>创建一个带有一些问题的类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindBugsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateFormat yyyyMMdd = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">yyyyMMddForMat</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> yyyyMMdd.format(date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRanDom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.round(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMap</span><span class="params">(Map&lt;?, ?&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span> &amp;&amp; map.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object key : map.keySet()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"key---&gt;"</span> + key);</span><br><span class="line">                System.out.println(<span class="string">"value---&gt;"</span> + map.get(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">trimString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        str.trim();</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.equals(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>选中该类，点击上面插件面板序号为 1 对应的按钮，进行文件分析，结果如下<br><img src="/images/IntelliJ-IDEA-使用-FindBugs-进行代码分析/测试代码分析结果.png" alt="测试代码分析结果"><br>我们是使用 BUG 严重级别进行分组<br>分组类型对应如下 （红色编号）</p><ol><li>Of Concren 建议，如果遵循能更好的完善代码</li><li>Troubling 不好的，可能会引发不良后果</li><li>Scary <strong>严重问题</strong>，在某种情况下一定会出现问题</li><li>Scariest <strong>非常严重</strong>，已经影响到当前程序功能<br>  可以按照严重级别倒序进行修复，如果时间允许，可以将 <code>Of Concren</code> 中的问题也一并修复</li></ol><p>下面对具体提示的 BUG 进行分析 （黄色编号）1.Random object created and used only once （Random 对象创建后只使用一次）</p><blockquote><p>该方法每次运行都会创建一个新的 Random 对象，执行一次后就会被回收。 但是在多线程情况获取随机数方法也能正常使用，所以可以定义一个 Random 对象常量，然后使用该常量对象进行方法调用。 能减少创建对象的性能开销</p></blockquote><p>2.Class defines equals()and uses Object.hashCode()（覆写了 equals 方法但是没有覆写 hashCode 方法）</p><blockquote><p>在 Set，Map 中会使用对象的 hashCode 方法，如果覆写了 equals 方法但是没有覆写 hashCode 方法会导致在 Set，Map 对象中出现问题</p></blockquote><p>3.Inefficient use of keySet iterator instead of entrySet iterator （keySet 迭代器低效，应该使用 entrySet 进行替换）</p><blockquote><p>如果需要获取 Map 中的 key 和 value，使用 Map.entrySet()方法返回 Set&lt;Map.Entry&lt;K, V&gt;&gt; 对象，然后迭代该 Set，在使用 Entry 对象获取 key 和 value 更为高效</p></blockquote><p>4.Method ignores return value （方法忽略返回值）</p><blockquote><p>String 对象是不可变的，当调用 String.trim()后，是返回一个新的 String 对象，不会对调用者的内容进行改动</p></blockquote><p>5.int value cast to float and then passed to Math.round （将 int 值转换为 float，然后传递给 Math.round）</p><blockquote><p>Math.round()方法只接收 float 和 double 类型，然后转换为 int 和 long 类型，如果传递 int 类型，会先将其转换为 float 类型，然后再转换为 int 类型，所以导致该操作返回值与参数内容一致</p></blockquote><p>6.Call to static DateFormat （调用静态的 DateFormat 对象）</p><blockquote><p>DateFormat 对象是线程不安全的，如果多线程调用同一个 DateFormat 对象会导致结果异常</p></blockquote><p>FindBugs 只是一款静态代码分析工具，虽然分析大多数的问题，但是如果希望编写更为健壮的程序，还需进行更多的测试操作，切不可认为 FindBugs 没有分析出问题便认为没有问题了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;FindBugs-介绍&quot;&gt;&lt;a href=&quot;#FindBugs-介绍&quot; class=&quot;headerlink&quot; title=&quot;FindBugs 介绍&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://findbugs.sourceforge.net/&quot; target=&quot;_b
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 使用 lombok 减少冗长代码</title>
    <link href="https://ghthou.github.io/2018/01/13/IntelliJ-IDEA-%E4%BD%BF%E7%94%A8-lombok-%E5%87%8F%E5%B0%91%E5%86%97%E9%95%BF%E4%BB%A3%E7%A0%81/"/>
    <id>https://ghthou.github.io/2018/01/13/IntelliJ-IDEA-使用-lombok-减少冗长代码/</id>
    <published>2018-01-13T05:14:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对于 POJO，我们需要为其中的每个字段生成 getter，setter 方法，虽然能够使用 IDE 快速为我们生成。 但如果需要修改字段名称及字段类型，那么就需要删除在重新进行生成，终究还是有一些不方便。 如果使用 lombok，可以通过一些简单的注解直接生成我们所需要的代码，能极大的提高开发体验</p></blockquote><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><img src="/images/IntelliJ-IDEA-使用-lombok-减少冗长代码/IDEA安装lombok.png" alt="IDEA 安装 lombok.png"></p><h3 id="启用插件"><a href="#启用插件" class="headerlink" title="启用插件"></a>启用插件</h3><p><img src="/images/IntelliJ-IDEA-使用-lombok-减少冗长代码/启用插件.png" alt="启用插件. png"></p><h3 id="在项目中使用"><a href="#在项目中使用" class="headerlink" title="在项目中使用"></a>在项目中使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lombok-常用注解介绍"><a href="#lombok-常用注解介绍" class="headerlink" title="lombok 常用注解介绍"></a>lombok 常用注解介绍</h3><ol><li><p><a href="https://projectlombok.org/features/NonNull.html" target="_blank" rel="noopener">@NonNull</a></p><blockquote><p>使用 @NonNull 注解修饰的字段 通过 set 方法设置时如果为 null，将抛出 NullPointerException</p></blockquote></li><li><p><a href="https://projectlombok.org/features/Cleanup.html" target="_blank" rel="noopener">@Cleanup</a></p><blockquote><p>主要用来修饰 IO 流相关类，会在 finally 代码块中对该资源进行 close()；</p></blockquote></li><li><p><a href="https://projectlombok.org/features/GetterSetter.html" target="_blank" rel="noopener">@Getter,@Setter</a></p><blockquote><p>为字段生成 getter，setter 方法，标记到类上表明为所有字段生成</p></blockquote></li><li><p><a href="https://projectlombok.org/features/ToString.html" target="_blank" rel="noopener">@ToString</a></p><blockquote><p>生成 toString 方法，默认打印所有非静态字段</p></blockquote></li><li><p><a href="https://projectlombok.org/features/EqualsAndHashCode.html" target="_blank" rel="noopener">@EqualsAndHashCode</a></p><blockquote><p>生成 equals 和 hashCode 方法</p></blockquote></li><li><p><a href="https://projectlombok.org/features/Constructor.html" target="_blank" rel="noopener">@NoArgsConstructor,@RequiredArgsConstructor,@AllArgsConstructor</a></p><blockquote><p>NoArgsConstructor 无参构造函数<br>RequiredArgsConstructor 为未初始化的 final 字段和使用 @NonNull 标注的字段生成构造函数<br>AllArgsConstructor 为所有字段生成构造函数</p></blockquote></li><li><a href="https://projectlombok.org/features/Data.html" target="_blank" rel="noopener">@Data</a><blockquote><p>相当于同时使用 @Getter，@Setter，@ToString，@EqualsAndHashCode，@RequiredArgsConstructor</p></blockquote></li><li><p><a href="https://projectlombok.org/features/Value.html" target="_blank" rel="noopener">@Value</a></p><blockquote><p>使用后，类将使用 final 进行修饰，同时使用 @ToString，@EqualsAndHashCode，@AllArgsConstructor，@Getter</p></blockquote></li><li><p><a href="https://projectlombok.org/features/Builder.html" target="_blank" rel="noopener">@Builder</a></p><blockquote><p>创建一个静态内部类，使用该类可以使用链式调用创建对象<br>如 User 对象中存在 name，age 字段，User user=User.builder().name(“姓名”).age(20).build()</p></blockquote></li><li><p><a href="https://projectlombok.org/features/SneakyThrows.html" target="_blank" rel="noopener">@SneakyThrows</a></p><blockquote><p>对标注的方法进行 try catch 后抛出异常，可在 value 输入需要 catch 的异常数组，默认 catch Throwable</p></blockquote></li><li><p><a href="https://projectlombok.org/features/Synchronized.html" target="_blank" rel="noopener">@Synchronized</a></p><blockquote><p>在标注的方法内 使用 synchronized($lock) {} 对代码进行包裹 ,$lock 为 new Object[0]</p></blockquote></li><li><a href="https://projectlombok.org/features/Log.html" target="_blank" rel="noopener">@Log,@CommonsLog,@JBossLog,@Log,@Log4j,@Log4j2,@Slf4j,@XSlf4j</a><blockquote><p>生成一个当前类的日志对象，可以使用 topic 指定要获取的日志名称</p></blockquote></li></ol><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><blockquote><p>虽然 lombok 能为我们快速生成代码，但是有一些生成的代码依然无法满足我们的需求。 此时可配置 lombok.config 来解决问题</p></blockquote><p>以下列出一些常用的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lombok.getter.noIsPrefix=true(默认: false)  #lombok 默认对 boolean 类型字段生成的 get 方法使用 is 前缀, 通过此配置则使用 get 前缀</span><br><span class="line">lombok.accessors.chain=true(默认: false) #默认的 set 方法返回 void 设置为 true 返回调用对象本身</span><br><span class="line">lombok.accessors.fluent=true(默认: false) #如果设置为 true. get,set 方法将不带 get,set 前缀, 直接以字段名为方法名</span><br><span class="line">lombok.log.fieldName=logger(默认: log) #设置 log 类注解返回的字段名称</span><br></pre></td></tr></table></figure></p><p><strong> 注 </strong>：在 IDEA 中，<code>lombok.config</code>文件 请放置于 <code>src\main\java</code> 目录下，在 <code>src\main\resources</code> 中将不生效</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://projectlombok.org/" target="_blank" rel="noopener">lombok 官网</a></li><li><a href="https://github.com/mplushnikov/lombok-intellij-plugin" target="_blank" rel="noopener">IDEA lombok 插件</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;对于 POJO，我们需要为其中的每个字段生成 getter，setter 方法，虽然能够使用 IDE 快速为我们生成。 但如果需要修改字段名称及字段类型，那么就需要删除在重新进行生成，终究还是有一些不方便。 如果使用 lombok，可以通过一些简单
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="IntelliJ IDEA" scheme="https://ghthou.github.io/tags/IntelliJ-IDEA/"/>
    
      <category term="Lombok" scheme="https://ghthou.github.io/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Java 集成 Google Authenticator</title>
    <link href="https://ghthou.github.io/2018/01/13/Java-%E9%9B%86%E6%88%90-Google-Authenticator/"/>
    <id>https://ghthou.github.io/2018/01/13/Java-集成-Google-Authenticator/</id>
    <published>2018-01-13T05:11:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在网络攻击日益泛滥的今天，用户的密码可能会因为各种原因泄漏。 而一些涉及用户重要数据的服务，如 QQ，邮箱，银行，购物等等。 一但被有心人利用，那么除了自己隐私泄漏的风险外，还存在自己身份被冒充的危害，更有可能而导致极其严重的结果。 为此谷歌推出了 <code>Google Authenticator</code> 服务，其原理是在登录时除了输入密码外，还需根据 <code>Google Authenticator APP</code> 输入一个实时计算的验证码。 凭借此验证码，即使在密码泄漏的情况下，他人也无法登录你的账户</p></blockquote><h3 id="相关原理"><a href="#相关原理" class="headerlink" title="相关原理"></a>相关原理</h3><p><code>Google Authenticator</code> 使用了一种基于 <strong> 时间 </strong> 的 <code>TOTP</code> 算法，其中时间的选取为自 <code>1970-01-01 00:00:00</code> 以来的毫秒数除以 <code>30</code> 与 客户端及服务端约定的 <strong> 密钥 </strong> 进行计算，计算结果为一个 <strong>6 位数的字符串 </strong>（<em>首位数可能为 0，所以为字符串 </em>），所以在 <code>Google Authenticator</code> 中我们可以看见验证码每个 30 秒就会刷新一次。 更多详情可查看 <a href="https://blog.seetee.me/archives/73.html" target="_blank" rel="noopener">Google 账户两步验证的工作原理</a> 一文</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>由上可知，生成验证码有俩个重要的参数，其一为 <strong> 客户端与服务端约定的密钥 </strong>，其二便为 <strong>30 秒的个数 </strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个密钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createSecretKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SecureRandom random = <span class="keyword">new</span> SecureRandom();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">    random.nextBytes(bytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Base32().encodeToString(bytes).toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1970-01-01 00:00:00 以来的毫秒数除以 30 </span></span><br><span class="line"><span class="keyword">long</span> time = System.currentTimeMillis() / <span class="number">1000</span> / <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>根据这两个参数就可以生成一个验证码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据密钥获取验证码</span></span><br><span class="line"><span class="comment"> * 返回字符串是因为数值有可能以0开头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> secretKey 密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> time 第几个30秒 System.currentTimeMillis() / 1000 / 30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateTOTP</span><span class="params">(String secretKey, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> Base32().decode(secretKey.toUpperCase());</span><br><span class="line">    String hexKey = Hex.encodeHexString(bytes);</span><br><span class="line">    String hexTime = Long.toHexString(time);</span><br><span class="line">    <span class="keyword">return</span> TOTP.generateTOTP(hexKey, hexTime, <span class="string">"6"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为 <code>Google Authenticator</code>（<em>以下简称 </em>App）计算验证码也需要 <strong> 密钥 </strong> 的参与，而时间 App 则会在本地获取，所以我们需要将 <strong> 密钥保存在 App 中 </strong>，同时为了与其他账户进行区分，除了密钥外，我们还需要录入 <strong> 服务名称 </strong>，<strong>用户账户 </strong> 信息。 而为了方便用户信息的录入，我们一般将所有信息生成一张二维码图片，让用户通过扫码自动填写相关信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 Google Authenticator Key Uri</span></span><br><span class="line"><span class="comment"> * Google Authenticator 规定的 Key Uri 格式: otpauth://totp/&#123;issuer&#125;:&#123;account&#125;?secret=&#123;secret&#125;&amp;issuer=&#123;issuer&#125;</span></span><br><span class="line"><span class="comment"> * https://github.com/google/google-authenticator/wiki/Key-Uri-Format</span></span><br><span class="line"><span class="comment"> * 参数需要进行 url 编码 +号需要替换成%20</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> secret 密钥 使用 createSecretKey 方法生成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> account 用户账户 如: example@domain.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> issuer 服务名称 如: Google,GitHub</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createKeyUri</span><span class="params">(String secret, String account, String issuer)</span> </span>&#123;</span><br><span class="line">    String qrCodeStr = <span class="string">"otpauth://totp/$&#123;issuer&#125;:$&#123;account&#125;?secret=$&#123;secret&#125;&amp;issuer=$&#123;issuer&#125;"</span>;</span><br><span class="line">    Builder&lt;String, String&gt; mapBuilder = ImmutableMap.builder();</span><br><span class="line">    mapBuilder.put(<span class="string">"account"</span>, URLEncoder.encode(account, <span class="string">"UTF-8"</span>).replace(<span class="string">"+"</span>, <span class="string">"%20"</span>));</span><br><span class="line">    mapBuilder.put(<span class="string">"secret"</span>, URLEncoder.encode(secret, <span class="string">"UTF-8"</span>).replace(<span class="string">"+"</span>, <span class="string">"%20"</span>));</span><br><span class="line">    mapBuilder.put(<span class="string">"issuer"</span>, URLEncoder.encode(issuer, <span class="string">"UTF-8"</span>).replace(<span class="string">"+"</span>, <span class="string">"%20"</span>));</span><br><span class="line">    <span class="keyword">return</span> StringSubstitutor.replace(qrCodeStr, mapBuilder.build());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时再根据上述信息生成二维码，二维码生成方式可参考以下两种方案</p><ul><li><a href="/2018/01/13/使用-zxing-生成二维码/">使用 zxing 生成二维码.md</a></li><li><a href="/2018/01/13/使用-jQuery-qrcode-生成二维码/">使用 jQuery-qrcode 生成二维码.md</a></li></ul><p>此时选择使用 <code>Java</code> 的方式返回一个二维码图片流<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 将二维码图片输出到一个流中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> stream  输出流</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> width   宽</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> height  高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToStream</span><span class="params">(String content, OutputStream stream, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> WriterException, IOException </span>&#123;</span><br><span class="line">  BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">  MatrixToImageWriter.writeToStream(bitMatrix, format, stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>扫描二维码<br><img src="/images/Java-接入-Google-Authenticator/扫描二维码.png" alt="扫描二维码"><br>扫描成功后会新增一栏验证码信息<br><img src="/images/Java-接入-Google-Authenticator/扫描后新增一栏信息.png" alt="扫描后新增一栏信息"><br>再让用户输入验证码，与服务端进行校验，如果校验通过，则表明用户可以完好使用该功能<br>因为验证码是使用基于时间的 <code>TOTP</code> 算法，依赖于客户端与服务端时间的一致性。 如果客户端时间与服务端时间相差过大，那在用户没有同步时间的情况下，永远与服务端进行匹配。 同时服务端也有可能出现时间偏差的情况，这样反而导致时间正确的用户校验无法通过<br>为了解决这种情况，我们可以使用 <strong> 时间偏移量 </strong> 来解决该问题，<code>GoogleAuthenticator</code> 验证码的时间参数为 <code>1970-01-01 00:00:00 以来的毫秒数除以 30</code>，所以每 30 秒就会更新一次。 但是我们在后台进行校验时，除了与当前生成的二维码进行校验外，还会对当前时间参数 <strong> 前后偏移量 </strong> 生成的验证码进行校验，只要其中任意一个能够校验通过，就代表该验证码是有效的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 时间前后偏移量 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIME_OFFSET = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> secretKey 密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> totpCode TOTP 一次性密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verification</span><span class="params">(String secretKey, String totpCode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> time = System.currentTimeMillis() / <span class="number">1000</span> / <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 优先计算当前时间,然后再计算偏移量,因为大部分情况下客户端与服务的时间一致</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.equals(totpCode, generateTOTP(secretKey, time))) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = -TIME_OFFSET; i &lt;= TIME_OFFSET; i++) &#123;</span><br><span class="line">        <span class="comment">// i == 0 的情况已经算过</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(totpCode, generateTOTP(secretKey, time + i))) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p>根据以上代码我们可以简单的创建一个 <code>Google Authenticator</code> 的应用。 但是与此同时，我们也发现 <code>Google Authenticator</code> 严重依赖手机，又因为 <code>Google Authenticator</code> <strong> 没有同步功能 </strong>，所以如果用户一不小心删除了记录信息，或者 App 被卸载，手机系统重装等情况。 就会导致 <code>Google Authenticator</code> 成为使用者的障碍。 此时我们可以使用 <strong><a href="https://www.authy.com/app/" target="_blank" rel="noopener">Authy</a></strong> 这款支持 <strong> 同步功能 </strong> 的 App 以解决删除，卸载，重装等问题。 同时 <strong><a href="https://www.authy.com/app/" target="_blank" rel="noopener">Authy</a></strong> 也存在 <strong><a href="https://chrome.google.com/webstore/detail/authy/gaedmjdfmmahhbjefcbgaolhhanlaolb?hl=cn" target="_blank" rel="noopener">Chrome 插件</a></strong> 版本，用于解决在手机丢失的情况下获取验证码。除了 <strong><a href="https://www.authy.com/" target="_blank" rel="noopener">Authy</a></strong> 这个选择外，我们还可以使用 <strong> 备用验证码 </strong> 的机制用户用于解决上述问题。 即在用户绑定 <code>Google Authenticator</code> 成功后自动为用户生成多个 <strong> 备用验证码 </strong>，然后在前台显示。 并让用户进行保存，再让用户使用备用验证码进行校验，以确保用户保存成功，可以参考 <strong> 印象笔记 </strong> 的用法 <a href="https://help.evernote.com/hc/sr-me/articles/213420077--%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AF%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E7%99%BB%E5%BD%95%E4%B8%A4%E6%AD%A5%E9%AA%8C%E8%AF%81-" target="_blank" rel="noopener">如何开启印象笔记登录两步验证？</a></p><p>另外本文同时参考了以下资料</p><ul><li><a href="http://www.asaph.org/2016/04/google-authenticator-2fa-java.html" target="_blank" rel="noopener">Google Authenticator compatible 2-Factor Auth in Java</a></li><li><a href="https://github.com/asaph/twofactorauth" target="_blank" rel="noopener">twofactorauth</a></li><li><a href="http://awtqty-zhang.iteye.com/blog/1986275" target="_blank" rel="noopener">Google Authenticator JAVA 实例</a></li><li><a href="https://blog.seetee.me/archives/73.html" target="_blank" rel="noopener">Google 账户两步验证的工作原理</a></li><li><a href="https://github.com/wstrange/GoogleAuth" target="_blank" rel="noopener">GoogleAuth</a></li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/ghthou/google-authenticator-integration" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在网络攻击日益泛滥的今天，用户的密码可能会因为各种原因泄漏。 而一些涉及用户重要数据的服务，如 QQ，邮箱，银行，购物等等。 一但被有心人利用，那么除了自己隐私泄漏的风险外，还存在自己身份被冒充的危害，更有可能而导致极其严重的结果。 为此谷歌推出了
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Google Authenticator" scheme="https://ghthou.github.io/tags/Google-Authenticator/"/>
    
      <category term="三方接入" scheme="https://ghthou.github.io/tags/%E4%B8%89%E6%96%B9%E6%8E%A5%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Java 源码研究之线程池</title>
    <link href="https://ghthou.github.io/2018/01/13/Java-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://ghthou.github.io/2018/01/13/Java-源码研究之线程池/</id>
    <published>2018-01-13T05:09:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文是在观看 <a href="http://www.jianshu.com/p/87bff5cc8d8c" target="_blank" rel="noopener">深入分析java线程池的实现原理</a> 后,对其中讲述的方法虽然了解其功能及大致步骤,但是对其中具体实现依然不太明白,所以查看其中的源码,并对源码的操作步骤进行说明.至于方法功能,使用等等.请参考上面的文章</p><p>主要研究的类为</p><ul><li>java.util.concurrent.ThreadPoolExecutor</li><li>java.util.concurrent.FutureTask</li></ul><p>源码版本为<code>jdk1.8.0_91</code></p><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>首先需要了解 <code>AtomicInteger</code> 类型的 <code>ctl</code> 变量,这个变量以32位二进制的方式描述俩种信息</p><ol><li>前三位表示线程池的状态<ul><li>RUNNING(111) 接受新任务并处理排队的任务</li><li>SHUTDOWN(000) 不接受新任务，而是处理排队的任务</li><li>STOP(011) 不接受新任务，不处理排队的任务和中断进行中的任务</li><li>TIDYING(100) 所有任务已终止，workerCount 为零， 线程过渡到状态 TIDYING 将运行 terminate() 钩子方法</li><li>TERMINATED(110) terminated() 已完成</li></ul></li><li>后二十九位表示当前工作的线程数(<code>[0,(2^29)-1]</code>)</li></ol><p>任务执行有俩种方法,其中 <code>execute</code> 方法由 <code>ThreadPoolExecutor</code> 提供<br><code>submit</code> 方法继承自 <code>AbstractExecutorService</code> 的实现</p><h4 id="java-util-concurrent-ThreadPoolExecutor-execute-Runnable-command"><a href="#java-util-concurrent-ThreadPoolExecutor-execute-Runnable-command" class="headerlink" title="java.util.concurrent.ThreadPoolExecutor#execute(Runnable command)"></a>java.util.concurrent.ThreadPoolExecutor#execute(Runnable command)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 参数校验</span></span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">// workerCountOf 获取当前工作的线程数与设置的核心线程数进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="comment">// 创建新的线程(核心线程)执行任务</span></span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))<span class="comment">// 如果成功,结束该方法</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 如果创建失败(可能存在多线程同时创建线程执行任务),往下继续执行</span></span><br><span class="line">        c = ctl.get();<span class="comment">//重新获取ctl的值,因为执行 addWorker 方法后该值可能变更</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果处于 RUNNING 状态,并且成功将任务添加到队列中</span></span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">        <span class="comment">// 继续检查线程状态,因为可能存在上面操作完成后,线程池被关闭</span></span><br><span class="line">        <span class="comment">// 如果线程状态变更(不能接受新任务)且该任务没有被执行(依旧在队列中),丢弃该任务</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)<span class="comment">// 如果工作线程数为0,创建新线程并启动(此处这样做的原因暂时尚未研究清除)</span></span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">    <span class="comment">// 如果不是 RUNNING 状态或者任务列队已满无法再添加新任务</span></span><br><span class="line">    <span class="comment">// 创建新的线程进行处理(非核心线程),如果处理失败(线程池被关闭或者已达最大线程数量),进行丢弃处理</span></span><br><span class="line">        reject(command);<span class="comment">//丢弃处理,默认为抛出异常,可通过改变参数列表中的 RejectedExecutionHandler 对象来进行其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-ThreadPoolExecutor-addWorker-Runnable-firstTask-boolean-core"><a href="#java-util-concurrent-ThreadPoolExecutor-addWorker-Runnable-firstTask-boolean-core" class="headerlink" title="java.util.concurrent.ThreadPoolExecutor#addWorker(Runnable firstTask, boolean core)"></a>java.util.concurrent.ThreadPoolExecutor#addWorker(Runnable firstTask, boolean core)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="comment">//根据 ctl 获取运行状态</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">// 判断线程池是否能够接受新任务</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取工作的线程数</span></span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="comment">// 判断是否能够新建线程,如果不能结束操作</span></span><br><span class="line">            <span class="comment">// 如果线程数大于等于 536870911 或者大于等于设置的线程数直接返回false</span></span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 如果能创建线程,线程数加1</span></span><br><span class="line">            <span class="comment">// 如果增加成功(CAS操作),跳出最外层循环,执行线程启动逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            <span class="comment">// 如果增加失败,表明 ctl 已被修改,更新ctl的值</span></span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="comment">// 如果线程池的状态变更,重新执行 retry 循环</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;<span class="comment">// worker 是否启动标识符</span></span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;<span class="comment">// worker 是否被添加标识符</span></span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);<span class="comment">// 根据 firstTask 构建 Worker 对象</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;<span class="comment">// 该线程对象根据 Worker 创建而来</span></span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;<span class="comment">// 如果无法创建线程,返回false</span></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();<span class="comment">// 开启锁</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());<span class="comment">// 获取状态</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;<span class="comment">// 如果是RUNNING状态 或者是 SHUTDOWN 状态但是任务为空</span></span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable 如果任务已经运行 抛出异常</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);<span class="comment">// 将 Worker 添加到 Set 集合中</span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();<span class="comment">// 获取 Set 中的数量</span></span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)<span class="comment">// 如果数量大于 largestPoolSize 更新 largestPoolSize 的值</span></span><br><span class="line">                        largestPoolSize = s;<span class="comment">// largestPoolSize 是同时存在的最大线程数</span></span><br><span class="line">                    </span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;<span class="comment">// 标志 Worker 已经被添加到 Set 中</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock(); <span class="comment">// 无论如何,释放锁资源</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;<span class="comment">// 如果 Worker 已经被添加,启动 Worker 中的线程</span></span><br><span class="line">                t.start(); <span class="comment">// 实际上是调用 ThreadPoolExecutor.runWorker(Worker w) 方法</span></span><br><span class="line">                workerStarted = <span class="keyword">true</span>;<span class="comment">// 标志 Worker 已经启动</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted) <span class="comment">// 如果 Worker 没有启动,将该 Worker 从 Set 中移除,同时当前工作线程数减1,尝试结束线程池</span></span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-ThreadPoolExecutor-runWorker-Worker-w"><a href="#java-util-concurrent-ThreadPoolExecutor-runWorker-Worker-w" class="headerlink" title="java.util.concurrent.ThreadPoolExecutor#runWorker(Worker w)"></a>java.util.concurrent.ThreadPoolExecutor#runWorker(Worker w)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前的线程</span></span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取 Worker 中的具体执行任务</span></span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;<span class="comment">// 将 firstTask 对象设置为null</span></span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts 释放锁资源,允许中断</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;<span class="comment">// 是否为未执行任务就结束线程</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 循环判断当前任务 或者 阻塞获取任务</span></span><br><span class="line">        <span class="comment">// 如果 task 且 getTask() 不为 null,执行该任务,否则表明线程中断,超时,需要结束该线程</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="comment">// 对线程中断进行判定</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 线程运行之前方法,在 ThreadPoolExecutor 中为空实现(可通过继承进行一些自己的处理)</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;<span class="comment">// 获取异常信息,传递给 afterExecute 方法</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 线程运行之后方法,在 ThreadPoolExecutor 中为空实现(可通过继承进行一些自己的处理)</span></span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;<span class="comment">// 将 task 设置为 null,防止重复执行</span></span><br><span class="line">                w.completedTasks++;<span class="comment">// 线程执行次数加1</span></span><br><span class="line">                w.unlock();<span class="comment">// 释放锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 退出线程,统计执行任务总数,从 Set 中删除 Worker,尝试结束线程池</span></span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-ThreadPoolExecutor-getTask"><a href="#java-util-concurrent-ThreadPoolExecutor-getTask" class="headerlink" title="java.util.concurrent.ThreadPoolExecutor#getTask()"></a>java.util.concurrent.ThreadPoolExecutor#getTask()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out? </span></span><br><span class="line">    <span class="comment">// workQueue.poll 操作是否超时</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">// 检查线程池状态及列队是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="comment">// 减少线程数量并返回 null,返回 null 会结束调用该方法的线程</span></span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="comment">// 判断是否开启线程超时清理操作</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果工作线程大于设定的最大线程数 或者 应该清理线程且该线程超时</span></span><br><span class="line">        <span class="comment">// 且 工作线程数大于1 或 列队已空</span></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="comment">// 减少工作线程数量,如果成功返回 null 结束调用该方法的线程</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 否则重新执行循环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果该结束超时线程,在设定的超时时间内获取列队中的元素,如果获取为空</span></span><br><span class="line">            <span class="comment">// 则表明该线程已经超时,在下次循环式如果条件允许,结束该线程</span></span><br><span class="line">            <span class="comment">// 否则一直阻塞获取列队中的元素,然后返回</span></span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-AbstractExecutorService-submit-Callable-task"><a href="#java-util-concurrent-AbstractExecutorService-submit-Callable-task" class="headerlink" title="java.util.concurrent.AbstractExecutorService#submit(Callable task)"></a>java.util.concurrent.AbstractExecutorService#submit(Callable<t> task)</t></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 依靠FutureTask的构造方法,根据对应参数新建一个FutureTask对象</span></span><br><span class="line">    <span class="comment">// FutureTask(Callable&lt;V&gt; callable) ,FutureTask(Runnable runnable, V result) </span></span><br><span class="line">    <span class="comment">// FutureTask 实现了 RunnableFuture 接口,而 RunnableFuture 继承了 Future,Runnable 接口</span></span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">    <span class="comment">// 执行 execute 方法,该方法的实现由子类提供,此处参考 java.util.concurrent.ThreadPoolExecutor#execute</span></span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="comment">// 返回 ftask 对象</span></span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h3><p>存在一个 <code>int</code> 类型的 <code>state</code> 变量,改变量的至可能为以下六种</p><ol><li>NEW           初始状态</li><li>COMPLETING    任务执行完成,即将更改为NORMAL或EXCEPTIONAL状态</li><li>NORMAL        任务执行完成(无异常)</li><li>EXCEPTIONAL   任务执行完成(有异常)</li><li>CANCELLED     任务取消</li><li>INTERRUPTING  中断进行中</li><li>INTERRUPTED   中断完成</li></ol><p>状态变更存在以下几种顺序</p><blockquote></blockquote><p>NEW -&gt; COMPLETING -&gt; NORMAL<br>NEW -&gt; COMPLETING -&gt; EXCEPTIONAL<br>NEW -&gt; CANCELLED<br>NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</p><h4 id="java-util-concurrent-FutureTask-get"><a href="#java-util-concurrent-FutureTask-get" class="headerlink" title="java.util.concurrent.FutureTask#get()"></a>java.util.concurrent.FutureTask#get()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = state;</span><br><span class="line">    <span class="comment">// 如果当前状态为 NEW 或 COMPLETING 证明该线程还没有执行完成,等待该线程完成</span></span><br><span class="line">    <span class="keyword">if</span> (s &lt;= COMPLETING)</span><br><span class="line">        s = awaitDone(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    <span class="keyword">return</span> report(s);<span class="comment">// 否则获取返回的状态值,进行判断后返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-FutureTask-report-int-s"><a href="#java-util-concurrent-FutureTask-report-int-s" class="headerlink" title="java.util.concurrent.FutureTask#report(int s)"></a>java.util.concurrent.FutureTask#report(int s)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">report</span><span class="params">(<span class="keyword">int</span> s)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</span><br><span class="line">    Object x = outcome;</span><br><span class="line">    <span class="keyword">if</span> (s == NORMAL) <span class="comment">// 如果状态为 NORMAL 代表线程执行正常返回,其他都属于异常情况(执行过程异常,线程中断,任务取消)</span></span><br><span class="line">        <span class="keyword">return</span> (V)x;</span><br><span class="line">    <span class="keyword">if</span> (s &gt;= CANCELLED)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException((Throwable)x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-FutureTask-awaitDone-boolean-timed-long-nanos"><a href="#java-util-concurrent-FutureTask-awaitDone-boolean-timed-long-nanos" class="headerlink" title="java.util.concurrent.FutureTask#awaitDone(boolean timed, long nanos)"></a>java.util.concurrent.FutureTask#awaitDone(boolean timed, long nanos)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">awaitDone</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 超时到期时间,如果不进行超时判断,返回0</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> deadline = timed ? System.nanoTime() + nanos : <span class="number">0L</span>;</span><br><span class="line">    WaitNode q = <span class="keyword">null</span>; <span class="comment">// 等待任务结果消息的节点</span></span><br><span class="line">    <span class="keyword">boolean</span> queued = <span class="keyword">false</span>;<span class="comment">// 是否成功将当前 WaitNode 放入到 waiters 链表中</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 如果当前线程中断,取消链接超时或中止的等待节点</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            removeWaiter(q);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="comment">// 如果状态大于 COMPLETING 证明已经执行完毕,返回状态值</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; COMPLETING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="keyword">null</span>)</span><br><span class="line">                q.thread = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果状态等于 COMPLETING,暂停线程,等待状态变更,然后继续进入循环</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s == COMPLETING) <span class="comment">// cannot time out yet</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (q == <span class="keyword">null</span>)<span class="comment">// 如果 状态等于 NEW 并且 WaitNode 为null</span></span><br><span class="line">            q = <span class="keyword">new</span> WaitNode();<span class="comment">// 创建一个新的 WaitNode 对象,然后重新循环后进入下一步</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!queued)<span class="comment">// 如果 queued 为false</span></span><br><span class="line">            <span class="comment">// 将 waiters 对象设置为当前的 WaitNode 的下一个节点,然后将 waiters 引用指向当前的 WaitNode </span></span><br><span class="line">            <span class="comment">// 如果操作失败,循环执行,直到成功或在之前的条件判断中提前结束</span></span><br><span class="line">            queued = UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset,</span><br><span class="line">                                                 q.next = waiters, q);</span><br><span class="line">            <span class="comment">// 修改成功过后,判断获取结果是否需要进行超时判定</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (timed) &#123;</span><br><span class="line">            nanos = deadline - System.nanoTime();</span><br><span class="line">            <span class="comment">// 如果已经超时,取消链接超时或中止的等待节点,返回状态</span></span><br><span class="line">            <span class="keyword">if</span> (nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                removeWaiter(q);</span><br><span class="line">                <span class="keyword">return</span> state;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在到期时间内禁用当前线程,任务完成后会被唤醒</span></span><br><span class="line">            LockSupport.parkNanos(<span class="keyword">this</span>, nanos);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 禁用当前线程,任务完成后会被唤醒</span></span><br><span class="line">            LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>java.util.concurrent.ThreadPoolExecutor#runWorker(Worker w)</code> 方法中任务执行是直接调用 <code>run</code> 方法,因为<code>FutureTask</code>需要获取任务运行结果及收集异常,所以对 <code>run</code> 方法进行了包装<br>在构造 FutureTask 时参数允许接受 Callable 与 Runnable 类型,实际上他会将 Runnable 类型转为一个 Callable 类型,然后使用 <code>call()</code> 方法进行调用</p><h4 id="java-util-concurrent-FutureTask-run"><a href="#java-util-concurrent-FutureTask-run" class="headerlink" title="java.util.concurrent.FutureTask#run()"></a>java.util.concurrent.FutureTask#run()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 检查线程状态,如果不是 NEW 状态或 runner 变量不为 null 结束该方法</span></span><br><span class="line">    <span class="keyword">if</span> (state != NEW ||</span><br><span class="line">        !UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, runnerOffset,</span><br><span class="line">                                     <span class="keyword">null</span>, Thread.currentThread()))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Callable&lt;V&gt; c = callable;</span><br><span class="line">        <span class="comment">// 如果 Callable 可以运行</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</span><br><span class="line">            V result;</span><br><span class="line">            <span class="keyword">boolean</span> ran;<span class="comment">// 是否执行过程中无异常</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 运行 Callable 中的任务</span></span><br><span class="line">                result = c.call();</span><br><span class="line">                ran = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                <span class="comment">// 异常处理</span></span><br><span class="line">                result = <span class="keyword">null</span>;</span><br><span class="line">                ran = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 更新状态,并将异常设置为返回值,以方便异常传递,通知所有等待节点恢复运行</span></span><br><span class="line">                setException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ran)</span><br><span class="line">                <span class="comment">// 更新状态,设置返回值,通知所有等待节点恢复运行</span></span><br><span class="line">                set(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// runner must be non-null until state is settled to</span></span><br><span class="line">        <span class="comment">// prevent concurrent calls to run()</span></span><br><span class="line">        runner = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// state must be re-read after nulling runner to prevent</span></span><br><span class="line">        <span class="comment">// leaked interrupts</span></span><br><span class="line">        <span class="keyword">int</span> s = state;</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= INTERRUPTING)</span><br><span class="line">            handlePossibleCancellationInterrupt(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="java-util-concurrent-FutureTask-set-V-v"><a href="#java-util-concurrent-FutureTask-set-V-v" class="headerlink" title="java.util.concurrent.FutureTask#set(V v)"></a>java.util.concurrent.FutureTask#set(V v)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 更新状态为 COMPLETING</span></span><br><span class="line">    <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</span><br><span class="line">        <span class="comment">// 设置返回值</span></span><br><span class="line">        outcome = v;</span><br><span class="line">        <span class="comment">// 更新状态为 NORMAL</span></span><br><span class="line">        UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, NORMAL); <span class="comment">// final state</span></span><br><span class="line">        <span class="comment">// 通知其他等待线程,如 get() 让他恢复运行</span></span><br><span class="line">        finishCompletion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>setException(Throwable t)</code> 方法请参考 <code>set(V v)</code></p><h4 id="java-util-concurrent-FutureTask-finishCompletion"><a href="#java-util-concurrent-FutureTask-finishCompletion" class="headerlink" title="java.util.concurrent.FutureTask#finishCompletion()"></a>java.util.concurrent.FutureTask#finishCompletion()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert state &gt; COMPLETING;</span></span><br><span class="line">    <span class="comment">// 如果等待对象不为空</span></span><br><span class="line">    <span class="keyword">for</span> (WaitNode q; (q = waiters) != <span class="keyword">null</span>;) &#123;</span><br><span class="line">        <span class="comment">// 将 waiters 设置为 null,然后循环唤醒等待结果的线程</span></span><br><span class="line">        <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, waitersOffset, q, <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">// 获取等待的线程</span></span><br><span class="line">                Thread t = q.thread;</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q.thread = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 唤醒对应的线程</span></span><br><span class="line">                    LockSupport.unpark(t);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// WaitNode 为链表结构,获取下一个WaitNode</span></span><br><span class="line">                WaitNode next = q.next;</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                q.next = <span class="keyword">null</span>; <span class="comment">// unlink to help gc</span></span><br><span class="line">                q = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行 done 方法,在 FutureTask 中为空实现,子类可以覆写该方法用于其他处理</span></span><br><span class="line">    done();</span><br><span class="line"></span><br><span class="line">    callable = <span class="keyword">null</span>;        <span class="comment">// to reduce footprint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是在观看 &lt;a href=&quot;http://www.jianshu.com/p/87bff5cc8d8c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入分析java线程池的实现原理&lt;/a&gt; 后,对其中讲述的方法虽然了解其功能及大致步骤,但是对其中具体
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="线程池" scheme="https://ghthou.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Java 源码研究之 HashMap</title>
    <link href="https://ghthou.github.io/2018/01/13/Java-%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6%E4%B9%8B-HashMap/"/>
    <id>https://ghthou.github.io/2018/01/13/Java-源码研究之-HashMap/</id>
    <published>2018-01-13T05:09:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>本文是在观看 <a href="http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">Java HashMap 工作原理及实现</a> 后，虽然大致了解了 <code>HashMap</code> 的工作原理及实现，但是对实现的具体过程，思路尚未贯通，所以对于其中的几个核心方法按照每个步骤进行研究，注释</p><p>源码版本为<code>jdk1.8.0_91</code></p><p><code>put(K key, V value)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用 putVal 方法</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对 key 进行 hash 操作</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// 如果 key 为 null,返回0,否则调用 hashCode() 方法,然后对 hashCode 高16bit不变，低16bit和高16bit做了一个异或处理</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 如果 table 为 null,或者 table 的长度为0,进行初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 根据 (table长度-1) 与 hash 计算得出该 hash 在table中的索引</span></span><br><span class="line">    <span class="comment">// 根据索引获取对应的值,如果该值为 null,在此位置插入一个 Node 对象</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 判断该值的 hash,key 与要插入的 hash,key 是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="comment">// 如果相等,表明该key为当前节点的第一个,将原值设置为当前 e 对象</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 判断当前节点是否为 TreeNode 类型</span></span><br><span class="line">            <span class="comment">// 如果是 TreeNode 类型,使用红黑树的方式找出对应节点或新增节点并返回</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果是链表类型</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 如果下一个节点为 null,进行节点追加操作</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">// 如果当前节点的数量大于等于 8,将链表转换为 TreeNode</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果链表中存在该 key,因为已经将该节点赋值给 e,所以直接结束循环,等待下面的方法对值进行更新</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 e 不等于 null,证明存在旧节点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="comment">// 更新原本旧值</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 空实现</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作数加1</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果总数加1大于threshold,进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>get(K key)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 调用 getNode 方法进行获取 Node 对象</span></span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>getNode(int hash, Object key)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 如果 table 为 null 或 table 的长度为0 或 根据 hash 计算的节点为 null,返回null,否则进行查找</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查第一个节点是否为当前 key</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果第二个节点不是 null</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是 TreeNode 类型</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 使用红黑树的查找方法进行查找</span></span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 循环判断 hash,key是否相等,如果相等,返回否则一直到链表结束</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>remove(Object key)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="comment">// 调用 removeNode 方法</span></span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>removeNode(int hash, Object key, Object value,boolean matchValue, boolean movable)</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="comment">// 如果 table 为 null 或 table 的长度为0 或 根据 hash 计算的节点为 null,返回null,否则进行查找</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        <span class="comment">// 检查第一个节点是否为当前 key,如果是将其赋值给 node 变量</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="comment">// 如果第二个节点不为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果是 TreeNode 类型</span></span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 使用红黑树的查找方法进行查找</span></span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 循环判断 hash,key 是否相等,如果相等,赋值给 node 变量</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果根据 key 找到对应节点</span></span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="comment">// 根据该节点的类型进行对应的删除操作</span></span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">// 如果是 TreeNode 类型,按照红黑树的方式删除</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                <span class="comment">// 如果是第一个,将table中的该索引指向第二个节点</span></span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//如果是在链表中,将 node 的前一个节点的 next 指向 node 的节点的 next</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            <span class="comment">// 操作数加1</span></span><br><span class="line">            ++modCount;</span><br><span class="line">            <span class="comment">// 总数减1</span></span><br><span class="line">            --size;</span><br><span class="line">            <span class="comment">// 空实现</span></span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>resize()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">// 原数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">// 原容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">// 原threshold值(容量*负载因子)</span></span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果原容量大于 0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果数组长度达到最大上限,更新 threshold,不进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则容量*2 threshold*2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果在构造函数中设置了初始 threshold 使用 HashMap(int initialCapacity, float loadFactor)创建 Map</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">    <span class="comment">// 如果原容量且原threshold 都为0,进行初始化操作</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果 newThr == 0 ( oldThr &gt; 0 为 true 时该判断才会为 true)</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">// 计算新的 threshold</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新 threshold</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    <span class="comment">// 根据newCap 构造一个新数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    <span class="comment">// 更显table引用</span></span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 如果 oldTab 不为 null,表明为扩容操作,否则为table初始化操作</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历原数组中的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 如果该元素不为 null</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将原数组该索引设置为null,方便回收</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 如果该节点下一个元素为null,表明该节点只存在一个元素</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 将该节点设置到新数组中去</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 如果节点为 TreeNode 类型,按照对应方式设置到新数组中</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">// 如果是数量大于1的链表</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 此处操作跟hash计算索引有关</span></span><br><span class="line">                        <span class="comment">// 在 HashMap 中,索引的计算方法为 (n - 1) &amp; hash</span></span><br><span class="line">                        <span class="comment">// 所以,在进行扩容操作 (n*2) 后,该计算结果可能导致变更</span></span><br><span class="line">                        <span class="comment">// 例如</span></span><br><span class="line">                        <span class="comment">// 有一个值为 111001 的 hash</span></span><br><span class="line">                        <span class="comment">// 扩容前  n=16(10000)  n-1=15(1111)  (n - 1) &amp; hash = 1111 &amp; 111001= 001001</span></span><br><span class="line">                        <span class="comment">// 扩容后 n=32(100000) n-1=31(11111)  (n - 1) &amp; hash = 11111 &amp; 111001= 011001</span></span><br><span class="line">                        <span class="comment">// 假如 hash 值为 101001</span></span><br><span class="line">                        <span class="comment">// 那么会发现扩容前  1111 &amp; 101001 = 001001</span></span><br><span class="line">                        <span class="comment">//           扩容后 11111 &amp; 101001 = 001001</span></span><br><span class="line">                        <span class="comment">// 所以可知,在进行扩容操作时,主要按照 hash 与 原数组长度中1的对应位置有关</span></span><br><span class="line">                        <span class="comment">// 如果 hash 中对应的位置为0,扩容后索引结果不变</span></span><br><span class="line">                        <span class="comment">// 不为0,表示索引结果为原结果+原数组长度</span></span><br><span class="line">                        <span class="comment">// 而 hash 中该对应位置的值只存在俩种可能 0,1</span></span><br><span class="line">                        <span class="comment">// 所以在该节点中的数据大约有一半索引不变,一半为原索引+原数组长度</span></span><br><span class="line">                        <span class="comment">// 通过 e.hash &amp; oldCap 的方式可以得知 hash 在 oldCap 1对应的位置是否为0或1</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 如果为0,证明扩容后索引的计算依然与扩容前一致</span></span><br><span class="line">                            <span class="comment">// 组装链表</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//如果不为0,则表明扩容后索引的计算依然与扩容不一致,所以需要移动到新索引,新索引的位置为旧索引加oldCap</span></span><br><span class="line">                            <span class="comment">// 组装链表</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 如果链表不为 null,设置到新数组中</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是在观看 &lt;a href=&quot;http://yikun.github.io/2015/04/01/Java-HashMap%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="HashMap" scheme="https://ghthou.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Jsoup 防止 XSS 攻击</title>
    <link href="https://ghthou.github.io/2018/01/13/Jsoup-%E9%98%B2%E6%AD%A2-XSS-%E6%94%BB%E5%87%BB/"/>
    <id>https://ghthou.github.io/2018/01/13/Jsoup-防止-XSS-攻击/</id>
    <published>2018-01-13T05:08:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>服务器处理富文本编辑器提交的内容时，因排版的需求不能对 HTML 标签进行转义，但为了防止 XSS 攻击，又必须过滤掉其中的 JS 代码，在 Java 中使用 Jsoup 正好可以满足此要求</p></blockquote><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>Jsoup 使用标签 <strong> 白名单 </strong> 的机制用来进行防止 XSS 攻击，假设白名单中只允许 p 标签存在，此时在一段 HTML 代码中，<strong>只能存在 p 标签 </strong>，其他标签将会被清除只保留被标签所包裹的内容，具体详情可查看参考资料</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://blog.csdn.net/xyw_blog/article/details/9145523" target="_blank" rel="noopener">Jsoup 学习之 Whitelist 类</a></p><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><ul><li>jsoup-1.9.2 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><ul><li><p>创建进行测试的 HTML 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String testHtml = <span class="string">"&lt;div class='div'style='height: 100px;'&gt;div 标签的内容 &lt;/div&gt;&lt;p class='div'style='width: 50px;'&gt;p 标签的内容 &lt;/p&gt;"</span>;</span><br></pre></td></tr></table></figure></li><li><p>创建一个白名单对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Whitelist whitelist = <span class="keyword">new</span> Whitelist();</span><br></pre></td></tr></table></figure></li><li><p>添加允许使用的标签，此时只允许 p 标签存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whitelist.addTags(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure></li><li><p>对测试代码进行过滤，过滤规则就是创建的白名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String result1 = Jsoup.clean(testHtml, whitelist);</span><br><span class="line">System.out.println(result1);<span class="comment">// 输出:   div 标签的内容 &lt; p&gt;p 标签的内容 &lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>此时我们发现 div 标签已经被过滤掉了，但是 p 标签中的属性也同时也被过滤掉了，因为白名单只允许了 p 标签，但是并未对属性加入白名单，此时将 p 标签中的 class 属性加入白名单中，再进行一次过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whitelist.addAttributes(<span class="string">"p"</span>,<span class="string">"class"</span>);</span><br><span class="line">String result2 = Jsoup.clean(testHtml, whitelist);</span><br><span class="line">System.out.println(result2);<span class="comment">// 输出:  div 标签的内容 &lt; p class="div"&gt;p 标签的内容 &lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>此时可见 class 属性已被允许存在，另外 <code>whitelist.addAttributes(String tag, String... keys)</code> 中的 keys 是一个可变数组，由此可知我们可以同时添加多个属性，如 <code>whitelist.addAttributes(&quot;p&quot;，&quot;class&quot;,&quot;style&quot;,&quot;title&quot;)</code>,<code>whitelist.addTags(String... tags)</code> 方法同理</p></li><li><p>此时假如我在白名单中添加了多个标签，那么如何才能快速对所有标签添加共同属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whitelist.addAttributes(<span class="string">":all"</span>,<span class="string">"style"</span>,<span class="string">"title"</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>:all</code> 表明给白名单中的所有标签添加 style，title 属性，此时我们将 div，h1 标签放入白名单，再进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whitelist.addTags(<span class="string">"div"</span>,<span class="string">"h1"</span>);</span><br><span class="line">testHtml = <span class="string">"&lt;h1 onclick='alert(1);'class='' style=''title=''&gt;h1 内容 &lt;/h1&gt;&lt;div class=''&gt;div 内容 &lt;/div&gt;&lt;p class='' style=''&gt;p 内容 &lt;/p&gt;"</span>;</span><br><span class="line">String result3 = Jsoup.clean(testHtml, whitelist);</span><br><span class="line">System.out.println(result3);<span class="comment">// 输出:  &lt;h1 style="title=""&gt;h1 内容 &lt;/h1&gt;&lt;div&gt;div 内容 &lt;/div&gt;&lt;p class=''style=""&gt;p 内容 &lt;/p&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>结果分析</p><ol><li>在 h1 标签中 onclick，class 属性被过滤掉了 因为他们不属于 h1 标签的白名单属性</li><li>在 div 标签中 class 属性被过滤掉了 理由同上</li><li>标签中的属性都被保留，因为 class 属性只添加 p 标签的白名单中 style 属性添加在所有标签的白名单中</li></ol></li></ul><ul><li>但是在实际使用中，允许的标签往往很多，这时 jsoup 默认给我们提供了 5 个白名单对象</li></ul><table><thead><tr><th>白名单对象</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>无</td><td>只保留标签内文本内容</td></tr><tr><td>simpleText</td><td>b,em,i,strong,u</td><td>简单的文本标签</td></tr><tr><td>basic</td><td>a,b,blockquote,br,cite,code,dd,<br>dl,dt,em,i,li,ol,p,pre,q,small,span,<br>strike,strong,sub,sup,u,ul</td><td>基本使用的标签</td></tr><tr><td>basicWithImages</td><td>basic 的基础上添加了 img 标签 <br> 及 img 标签的 src,align,alt,height,width,title 属性</td><td>基本使用的加上 img 标签</td></tr><tr><td>relaxed</td><td>a,b,blockquote,br,caption,cite,<br>code,col,colgroup,dd,div,dl,dt,<br>em,h1,h2,h3,h4,h5,h6,i,img,li,<br>ol,p,pre,q,small,span,strike,strong,<br>sub,sup,table,tbody,td,tfoot,th,thead,tr,u,ul</td><td>在 basicWithImages 的基础上又增加了一部分部分标签</td></tr></tbody></table><p> <strong> 如果没有图片上传的需求，使用 <code>basic</code>，否则使用 <code>basicWithImages</code></strong></p><h3 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h3><p>在刚才测试的时候，会发现 Jsoup.clean()方法返回的代码已经被进行格式化，在标签及标签内容之间添加了 \n 回车符，如果不需要的话，可以使用 <code>Jsoup.clean(testHtml, &quot;&quot;, whitelist, new Document.OutputSettings().prettyPrint(false));</code> 进行过滤</p><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.safety.Whitelist;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述: 过滤 HTML 标签中 XSS 代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 使用自带的 basicWithImages 白名单</span></span><br><span class="line"><span class="comment">     * 允许的便签有 a,b,blockquote,br,cite,code,dd,dl,dt,em,i,li,ol,p,pre,q,small,span,strike,strong,sub,sup,u,ul,img  </span></span><br><span class="line"><span class="comment">     * 以及 a 标签的 href,img 标签的 src,align,alt,height,width,title 属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Whitelist whitelist = Whitelist.basicWithImages();</span><br><span class="line">    <span class="comment">/** 配置过滤化参数, 不对代码进行格式化 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.OutputSettings outputSettings = <span class="keyword">new</span> Document.OutputSettings().prettyPrint(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 富文本编辑时一些样式是使用 style 来进行实现的</span></span><br><span class="line">        <span class="comment">// 比如红色字体 style="color:red;"</span></span><br><span class="line">        <span class="comment">// 所以需要给所有标签添加 style 属性</span></span><br><span class="line">        whitelist.addAttributes(<span class="string">":all"</span>, <span class="string">"style"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">clean</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Jsoup.clean(content, <span class="string">""</span>, whitelist, outputSettings);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;服务器处理富文本编辑器提交的内容时，因排版的需求不能对 HTML 标签进行转义，但为了防止 XSS 攻击，又必须过滤掉其中的 JS 代码，在 Java 中使用 Jsoup 正好可以满足此要求&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;实现
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="安全" scheme="https://ghthou.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 数据绑定学习笔记</title>
    <link href="https://ghthou.github.io/2018/01/13/SpringMVC-%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ghthou.github.io/2018/01/13/SpringMVC-数据绑定学习笔记/</id>
    <published>2018-01-13T05:07:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我在 <a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a> 观看 <a href="http://www.imooc.com/learn/558" target="_blank" rel="noopener">SpringMVC 数据绑定入门</a> 所做的学习笔记<br>其中包含对 <strong>List，Set，Map，JSON，XML 的数据绑定以及 PropertyEditor、Formatter、Converter 三种自定义类型转换器 </strong></p></blockquote><h3 id="List-类型绑定"><a href="#List-类型绑定" class="headerlink" title="List 类型绑定"></a>List 类型绑定</h3><ul><li><p>特点</p><ul><li><p>List 对象绑定需要建立一个 List 集合包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListUserWrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>List 的长度为前台传入的 <strong> 集合最大下标加 1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/list2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">list2</span><span class="params">(ListUserWrap listUserWrap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"listUserWrapSize:"</span> + listUserWrap.getUserList().size() + <span class="string">"\tlistUserWrap:"</span> + listUserWrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试数据</p><blockquote><p><a href="http://localhost/list2?userList[0].name=a&amp;userList[1].name=b" target="_blank" rel="noopener">http://localhost/list2?userList[0].name=a&amp;userList[1].name=b</a><br>listUserWrapSize:2 listUserWrap:ListUserWrap(userList=[User(age=0, name=a), User(age=0, name=b)])<br><a href="http://localhost/list2?userList[0].name=a&amp;userList[1].name=b&amp;userList[3].name=c" target="_blank" rel="noopener">http://localhost/list2?userList[0].name=a&amp;userList[1].name=b&amp;userList[3].name=c</a><br>listUserWrapSize:4 listUserWrap:ListUserWrap(userList=[User(age=0, name=a), User(age=0, name=b), User(age=0, name=null), User(age=0, name=c)])</p></blockquote></li></ul><h3 id="Set-类型绑定"><a href="#Set-类型绑定" class="headerlink" title="Set 类型绑定"></a>Set 类型绑定</h3><ul><li><p>特点</p><ul><li>Set 对象绑定需要建立一个 Set 集合包装类</li><li>需要先定义 Set 集合长度，并且前台传过来的 Set 长度不能越界，否者报错</li><li><p><strong> 设置 Set 长度时需要注意重写对象的 hashCode，equals 方法，否者后面的会掩盖前面的 </strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetUserWrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;User&gt; userSet;</span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetUserWrap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userSet = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        userSet.add(<span class="keyword">new</span> User());</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">"b"</span>);</span><br><span class="line">        userSet.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试数据</p><blockquote><p><a href="http://localhost/set?userSet[0].name=a" target="_blank" rel="noopener">http://localhost/set?userSet[0].name=a</a> 因为预先定义的第二个对象的 name 为 b，所以此处返回 b<br>setUserWrapSize:2 setUserWrap:SetUserWrap(userSet=[User(age=0, name=a), User(age=0, name=b)])<br><a href="http://localhost/set?userSet[0].name=a&amp;userSet[1].name=bbb" target="_blank" rel="noopener">http://localhost/set?userSet[0].name=a&amp;userSet[1].name=bbb</a><br>setUserWrapSize:2 setUserWrap:SetUserWrap(userSet=[User(age=0, name=a), User(age=0, name=bbb)])</p></blockquote></li></ul><h3 id="Map-类型绑定"><a href="#Map-类型绑定" class="headerlink" title="Map 类型绑定"></a>Map 类型绑定</h3><ul><li><p>特点</p><ul><li><p>建立一个 Map 包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapUserWrap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/map"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">map</span><span class="params">(MapUserWrap mapUserWrap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"mapUserWrapSize:"</span> + mapUserWrap.getUserMap().size() + <span class="string">"\tmapUserWrap:"</span> + mapUserWrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试数据</p><blockquote><p><a href="http://localhost/map?userMap[&quot;a&quot;].name=a&amp;userMap[&quot;b&quot;].name=b" target="_blank" rel="noopener">http://localhost/map?userMap[&quot;a&quot;].name=a&amp;userMap[&quot;b&quot;].name=b</a><br>mapUserWrapSize:2 mapUserWrap:MapUserWrap(userMap={a=User(age=0, name=a), b=User(age=0, name=b)})<br><a href="http://localhost/map?userMap[&quot;a&quot;].name=a&amp;userMap[&quot;a&quot;].name=b" target="_blank" rel="noopener">http://localhost/map?userMap[&quot;a&quot;].name=a&amp;userMap[&quot;a&quot;].name=b</a><br>mapUserWrapSize:1 mapUserWrap:MapUserWrap(userMap={a=User(age=0, name=a,b)})</p></blockquote></li></ul><h3 id="JSON-类型绑定"><a href="#JSON-类型绑定" class="headerlink" title="JSON 类型绑定"></a>JSON 类型绑定</h3><ul><li><p>前台在 body 区域传入以下类型格式字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="XML-类型绑定"><a href="#XML-类型绑定" class="headerlink" title="XML 类型绑定"></a>XML 类型绑定</h3><ul><li><p>前台在 body 区域传入以下类型格式字符串</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xmluser</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>a<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>1<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xmluser</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个 XML 包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"xmluser"</span>)<span class="comment">// 根节点标签名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlUser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@XmlElement</span>(name = <span class="string">"name"</span>)<span class="comment">// 属性标签名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@XmlElement</span>(name = <span class="string">"age"</span>)<span class="comment">// 属性标签名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/xml"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">xml</span><span class="params">(@RequestBody XmlUser xmlUser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> xmlUser.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义类型转换"><a href="#自定义类型转换" class="headerlink" title="自定义类型转换"></a>自定义类型转换</h3><h4 id="自定义类型转换-PropertyEditor"><a href="#自定义类型转换-PropertyEditor" class="headerlink" title="自定义类型转换 - PropertyEditor"></a>自定义类型转换 - PropertyEditor</h4><blockquote><p>在 Controller 中编写一个带有 InitBinder 注解的方法，传入 WebDataBinder 对象，使用该对象注册指定类型的转换关系，对该方法所在 Controller 中使用该类型的方法参数有效</p></blockquote>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/date"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date.toLocaleString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/date2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">date2</span><span class="params">(Date date2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date2.toLocaleString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InitBinder</span>(<span class="string">"date"</span>)<span class="comment">// 指定对变量名为 date 进行转换, 不会对 date2 生效</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDate</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    binder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"), true));</span><br><span class="line">    <span class="comment">//binder.registerCustomEditor(Class&lt;?&gt; requiredType, PropertyEditor propertyEditor)</span></span><br><span class="line">    <span class="comment">//new CustomDateEditor(DateFormat dateFormat, boolean allowEmpty)</span></span><br><span class="line">    <span class="comment">//allowEmpty 是否允许 Date 对象为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义类型转换-Formatter"><a href="#自定义类型转换-Formatter" class="headerlink" title="自定义类型转换 - Formatter"></a>自定义类型转换 - Formatter</h4><blockquote><p>根据 <code>String</code> 类型自定义转换规则转换成需要的类型，需要实现 <code>org.springframework.format.Formatter&lt;T&gt;</code> 接口，<code>T</code>为想要转换的结果类型</p></blockquote><ul><li><p>创建自定义 Formatter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String text, Locale locale)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = dateFormat.parse(text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Date object, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将自定义的 Formatter 注入到 SpringMVC 默认的 FormattingConversionServiceFactoryBean 中，同时将默认转换规则服务类配置为已经被注入的 bean 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"myFormattingConversionService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myFormattingConversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"formatters"</span>&gt;</span>,<span class="comment">&lt;!-- 此处为 formatters--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"&#123;包路径&#125;.DateFormatter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义类型转换-Converter"><a href="#自定义类型转换-Converter" class="headerlink" title="自定义类型转换 - Converter"></a>自定义类型转换 - Converter</h4><blockquote><p>自己指定数据来源类型及转换结果类型，相比 Formatter 更为灵活，需要实现 <code>org.springframework.core.convert.converter.Converter&lt;S, T&gt;</code> 接口，<code>S</code>为来源类型，<code>T</code>为结果类型</p></blockquote><ul><li><p>创建自定义 Converter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = dateFormat.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将自定义的 Converter 注入到 SpringMVC 默认的 FormattingConversionServiceFactoryBean 中，同时将默认转换规则服务类配置为已经被注入的 bean 对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">"myFormattingConversionService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myFormattingConversionService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"converters"</span>&gt;</span><span class="comment">&lt;!-- 此处为 converters--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"&#123;包路径&#125;.DateConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是我在 &lt;a href=&quot;http://www.imooc.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;慕课网&lt;/a&gt; 观看 &lt;a href=&quot;http://www.imooc.com/learn/558&quot; targ
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Spring MVC" scheme="https://ghthou.github.io/tags/Spring-MVC/"/>
    
  </entry>
  
  <entry>
    <title>ZooKeeper + Curator 实现分布式锁</title>
    <link href="https://ghthou.github.io/2018/01/13/ZooKeeper-Curator-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://ghthou.github.io/2018/01/13/ZooKeeper-Curator-实现分布式锁/</id>
    <published>2018-01-13T05:06:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<p>在 JDK 的 <code>java.util.concurrent.locks</code> 中，为我们提供了可重入锁，读写锁，及超时获取锁的方法。 为我们提供了完好的支持，但是在分布式系统中，当多个应用需要共同操作某一个资源时。 我么就无法使用 JDK 来实现了，这时就需要使用一个外部服务来为此进行支持，现在我们选用 <a href="https://zookeeper.apache.org" target="_blank" rel="noopener">ZooKeeper</a> + <a href="http://curator.apache.org" target="_blank" rel="noopener">Curator</a> 来完成分布式锁</p><h4 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h4><ul><li>ZooKeeper 3.5.3-beta</li><li>Curator 4.0.0</li></ul><p>如果 ZooKeeper 版本为 3.4.x，请进行<a href="http://curator.apache.org/zk-compatibility.html" target="_blank" rel="noopener">兼容处理</a></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>下载、安装、启动 ZooKeeper，可以查看这篇博文<a href="http://blog.csdn.net/gaohuanjie/article/details/37736939" target="_blank" rel="noopener"> ZooKeeper 的安装、配置、启动和使用（一）——单机模式</a><br>如果想跳过这一步的话请参考最下面的<a href="# 便捷测试">便捷测试</a><br>创建一个 Maven 工程，然后引入所需资源<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在 src/test/java 下创建一个 DistributedLockDemo 类<br>基本代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ZooKeeper 锁节点路径, 分布式锁的相关操作都是在这个节点上进行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockPath = <span class="string">"/distributed-lock"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ZooKeeper 服务地址, 单机格式为:(127.0.0.1:2181), 集群格式为:(127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183)</span></span><br><span class="line">    <span class="keyword">private</span> String connectString;</span><br><span class="line">    <span class="comment">// Curator 客户端重试策略</span></span><br><span class="line">    <span class="keyword">private</span> RetryPolicy retry;</span><br><span class="line">    <span class="comment">// Curator 客户端对象</span></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client;</span><br><span class="line">    <span class="comment">// client2 用户模拟其他客户端</span></span><br><span class="line">    <span class="keyword">private</span> CuratorFramework client2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化资源</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置 ZooKeeper 服务地址为本机的 2181 端口</span></span><br><span class="line">        connectString = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line">        <span class="comment">// 重试策略</span></span><br><span class="line">        <span class="comment">// 初始休眠时间为 1000ms, 最大重试次数为 3</span></span><br><span class="line">        retry = <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 创建一个客户端, 60000(ms)为 session 超时时间, 15000(ms)为链接超时时间</span></span><br><span class="line">        client = CuratorFrameworkFactory.newClient(connectString, <span class="number">60000</span>, <span class="number">15000</span>, retry);</span><br><span class="line">        client2 = CuratorFrameworkFactory.newClient(connectString, <span class="number">60000</span>, <span class="number">15000</span>, retry);</span><br><span class="line">        <span class="comment">// 创建会话</span></span><br><span class="line">        client.start();</span><br><span class="line">        client2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CloseableUtils.closeQuietly(client);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a><a href="http://curator.apache.org/curator-recipes/shared-lock.html" target="_blank" rel="noopener">共享锁</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建共享锁</span></span><br><span class="line">    InterProcessLock lock = <span class="keyword">new</span> InterProcessSemaphoreMutex(client, lockPath);</span><br><span class="line">    <span class="comment">// lock2 用于模拟其他客户端</span></span><br><span class="line">    InterProcessLock lock2 = <span class="keyword">new</span> InterProcessSemaphoreMutex(client2, lockPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取锁对象</span></span><br><span class="line">    lock.acquire();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试是否可以重入</span></span><br><span class="line">    <span class="comment">// 超时获取锁对象(第一个参数为时间, 第二个参数为时间单位), 因为锁已经被获取, 所以返回 false</span></span><br><span class="line">    Assert.assertFalse(lock.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    lock.release();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lock2 尝试获取锁成功, 因为锁已经被释放</span></span><br><span class="line">    Assert.assertTrue(lock2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    lock2.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享可重入锁"><a href="#共享可重入锁" class="headerlink" title="共享可重入锁"></a><a href="http://curator.apache.org/curator-recipes/shared-reentrant-lock.html" target="_blank" rel="noopener">共享可重入锁</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedReentrantLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建可重入锁</span></span><br><span class="line">    InterProcessLock lock = <span class="keyword">new</span> InterProcessMutex(client, lockPath);</span><br><span class="line">    <span class="comment">// lock2 用于模拟其他客户端</span></span><br><span class="line">    InterProcessLock lock2 = <span class="keyword">new</span> InterProcessMutex(client2, lockPath);</span><br><span class="line">    <span class="comment">// lock 获取锁</span></span><br><span class="line">    lock.acquire();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// lock 第二次获取锁</span></span><br><span class="line">        lock.acquire();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// lock2 超时获取锁, 因为锁已经被 lock 客户端占用, 所以获取失败, 需要等 lock 释放</span></span><br><span class="line">            Assert.assertFalse(lock2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 重入锁获取与释放需要一一对应, 如果获取 2 次, 释放 1 次, 那么该锁依然是被占用, 如果将下面这行代码注释, 那么会发现下面的 lock2 获取锁失败</span></span><br><span class="line">        lock.release();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在 lock 释放后, lock2 能够获取锁</span></span><br><span class="line">    Assert.assertTrue(lock2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    lock2.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="共享可重入读写锁"><a href="#共享可重入读写锁" class="headerlink" title="共享可重入读写锁"></a><a href="http://curator.apache.org/curator-recipes/shared-reentrant-read-write-lock.html" target="_blank" rel="noopener">共享可重入读写锁</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedReentrantReadWriteLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建读写锁对象, Curator 以公平锁的方式进行实现</span></span><br><span class="line">    InterProcessReadWriteLock lock = <span class="keyword">new</span> InterProcessReadWriteLock(client, lockPath);</span><br><span class="line">    <span class="comment">// lock2 用于模拟其他客户端</span></span><br><span class="line">    InterProcessReadWriteLock lock2 = <span class="keyword">new</span> InterProcessReadWriteLock(client2, lockPath);</span><br><span class="line">    <span class="comment">// 使用 lock 模拟读操作</span></span><br><span class="line">    <span class="comment">// 使用 lock2 模拟写操作</span></span><br><span class="line">    <span class="comment">// 获取读锁(使用 InterProcessMutex 实现, 所以是可以重入的)</span></span><br><span class="line">    InterProcessLock readLock = lock.readLock();</span><br><span class="line">    <span class="comment">// 获取写锁(使用 InterProcessMutex 实现, 所以是可以重入的)</span></span><br><span class="line">    InterProcessLock writeLock = lock2.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读写锁测试对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ReadWriteLockTest</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试数据变更字段</span></span><br><span class="line">        <span class="keyword">private</span> Integer testData = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> Set&lt;Thread&gt; threadSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            writeLock.acquire();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                testData++;</span><br><span class="line">                System.out.println(<span class="string">"写入数据 \ t"</span> + testData);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                writeLock.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            readLock.acquire();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">"读取数据 \ t"</span> + testData);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                readLock.release();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待线程结束, 防止 test 方法调用完成后, 当前线程直接退出, 导致控制台无法输出信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threadSet) &#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createThread</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">                            write();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            read();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            threadSet.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                createThread(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                createThread(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReadWriteLockTest readWriteLockTest = <span class="keyword">new</span> ReadWriteLockTest();</span><br><span class="line">    readWriteLockTest.test();</span><br><span class="line">    readWriteLockTest.waitThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果如下：</p><blockquote><p>写入数据 1<br>写入数据 2<br>读取数据 2<br>写入数据 3<br>读取数据 3<br>写入数据 4<br>读取数据 4<br>读取数据 4<br>写入数据 5<br>读取数据 5</p></blockquote><p>读取数据线程总是能看到最新写入的数据</p><h4 id="共享信号量"><a href="#共享信号量" class="headerlink" title="共享信号量"></a><a href="http://curator.apache.org/curator-recipes/shared-semaphore.html" target="_blank" rel="noopener">共享信号量</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">semaphore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个信号量, Curator 以公平锁的方式进行实现</span></span><br><span class="line">    InterProcessSemaphoreV2 semaphore = <span class="keyword">new</span> InterProcessSemaphoreV2(client, lockPath, <span class="number">6</span>);</span><br><span class="line">    <span class="comment">// semaphore2 用于模拟其他客户端</span></span><br><span class="line">    InterProcessSemaphoreV2 semaphore2 = <span class="keyword">new</span> InterProcessSemaphoreV2(client2, lockPath, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取一个许可</span></span><br><span class="line">    Lease lease = semaphore.acquire();</span><br><span class="line">    Assert.assertNotNull(lease);</span><br><span class="line">    <span class="comment">// semaphore.getParticipantNodes() 会返回当前参与信号量的节点列表, 俩个客户端所获取的信息相同</span></span><br><span class="line">    Assert.assertEquals(semaphore.getParticipantNodes(), semaphore2.getParticipantNodes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时获取一个许可</span></span><br><span class="line">    Lease lease2 = semaphore2.acquire(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    Assert.assertNotNull(lease2);</span><br><span class="line">    Assert.assertEquals(semaphore.getParticipantNodes(), semaphore2.getParticipantNodes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取多个许可, 参数为许可数量</span></span><br><span class="line">    Collection&lt;Lease&gt; leases = semaphore.acquire(<span class="number">2</span>);</span><br><span class="line">    Assert.assertTrue(leases.size() == <span class="number">2</span>);</span><br><span class="line">    Assert.assertEquals(semaphore.getParticipantNodes(), semaphore2.getParticipantNodes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超时获取多个许可, 第一个参数为许可数量</span></span><br><span class="line">    Collection&lt;Lease&gt; leases2 = semaphore2.acquire(<span class="number">2</span>, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">    Assert.assertTrue(leases2.size() == <span class="number">2</span>);</span><br><span class="line">    Assert.assertEquals(semaphore.getParticipantNodes(), semaphore2.getParticipantNodes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目前 semaphore 已经获取 3 个许可, semaphore2 也获取 3 个许可, 加起来为 6 个, 所以他们无法再进行许可获取</span></span><br><span class="line">    Assert.assertNull(semaphore.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    Assert.assertNull(semaphore2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放一个许可</span></span><br><span class="line">    semaphore.returnLease(lease);</span><br><span class="line">    semaphore2.returnLease(lease2);</span><br><span class="line">    <span class="comment">// 释放多个许可</span></span><br><span class="line">    semaphore.returnAll(leases);</span><br><span class="line">    semaphore2.returnAll(leases2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多重共享锁"><a href="#多重共享锁" class="headerlink" title="多重共享锁"></a><a href="http://curator.apache.org/curator-recipes/multi-shared-lock.html" target="_blank" rel="noopener">多重共享锁</a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 可重入锁</span></span><br><span class="line">    InterProcessLock interProcessLock1 = <span class="keyword">new</span> InterProcessMutex(client, lockPath);</span><br><span class="line">    <span class="comment">// 不可重入锁</span></span><br><span class="line">    InterProcessLock interProcessLock2 = <span class="keyword">new</span> InterProcessSemaphoreMutex(client2, lockPath);</span><br><span class="line">    <span class="comment">// 创建多重锁对象</span></span><br><span class="line">    InterProcessLock lock = <span class="keyword">new</span> InterProcessMultiLock(Arrays.asList(interProcessLock1, interProcessLock2));</span><br><span class="line">    <span class="comment">// 获取参数集合中的所有锁</span></span><br><span class="line">    lock.acquire();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为存在一个不可重入锁, 所以整个 InterProcessMultiLock 不可重入</span></span><br><span class="line">    Assert.assertFalse(lock.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// interProcessLock1 是可重入锁, 所以可以继续获取锁</span></span><br><span class="line">    Assert.assertTrue(interProcessLock1.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line">    <span class="comment">// interProcessLock2 是不可重入锁, 所以获取锁失败</span></span><br><span class="line">    Assert.assertFalse(interProcessLock2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放参数集合中的所有锁</span></span><br><span class="line">    lock.release();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// interProcessLock2 中的锁已经释放, 所以可以获取</span></span><br><span class="line">    Assert.assertTrue(interProcessLock2.acquire(<span class="number">2</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Curator-分布式锁解决的问题"><a href="#Curator-分布式锁解决的问题" class="headerlink" title="Curator 分布式锁解决的问题"></a>Curator 分布式锁解决的问题</h4><p>分布式锁服务宕机，ZooKeeper 一般是以集群部署，如果出现 ZooKeeper 宕机，那么只要当前正常的服务器超过集群的半数，依然可以正常提供服务<br>持有锁资源服务器宕机，假如一台服务器获取锁之后就宕机了，那么就会导致其他服务器无法再获取该锁。 就会造成 <strong>死锁</strong> 问题，在 Curator 中，锁的信息都是保存在临时节点上，如果持有锁资源的服务器宕机，那么 ZooKeeper 就会移除它的信息，这时其他服务器就能进行获取锁操作</p><h4 id="便捷测试"><a href="#便捷测试" class="headerlink" title="便捷测试"></a>便捷测试</h4><p>为了测试上面的代码，我们需要下载、安装、启动一个 ZooKeeper 服务，然后将该服务地址配置为 connectString。 如果更换环境的话又需要重新安装，未免麻烦了点。 Curator 为我们提供一个专门用于开发、测试的便捷方法，让我们更加专注于编写与 ZooKeeper 相关的程序。首先需要导入 curator-test 测试包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这个包中为我们提供了一个 TestingServer 类，主要用法如下<br>构造方法有多个，但是主要使用到的有这两个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestingServer()</span><br><span class="line">TestingServer(<span class="keyword">int</span> port, File tempDirectory)</span><br></pre></td></tr></table></figure></p><p>port 为端口<br>tempDirectory 为临时的 dataDir 目录<br>如果调用 <code>TestingServer()</code> 方法构造，会获取一个空闲端口，同时在 <code>java.io.tmpdir</code> 创建一个临时目录当作本次的 <code>dataDir</code> 目录<br>然后使用以下方法创建客户端<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TestingServer server=<span class="keyword">new</span> TestingServer();</span><br><span class="line"><span class="comment">// server.getConnectString() 方法会返回可用的服务链接地址, 如: 127.0.0.1:2181</span></span><br><span class="line">CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString(), retry);</span><br></pre></td></tr></table></figure></p><p>另外在测试完成记得进行资源释放<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CloseableUtils.closeQuietly(client);</span><br><span class="line">    CloseableUtils.closeQuietly(server);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>TestingServer 能为我们简单的启动一个 ZooKeeper 服务器，但是如果需要进行集群测试呢？这个时候我们可以使用 TestingCluster 启动 ZooKeeper 集群<br>TestingCluster 同样提供多个构造器，但是主要使用以下两个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestingCluster(<span class="keyword">int</span> instanceQty)</span><br><span class="line">TestingCluster(InstanceSpec... specs)</span><br></pre></td></tr></table></figure></p><p>instanceQty 是集群的数量<br>specs 是 InstanceSpec 的变长参数<br>InstanceSpec 的创建方法可以参考 TestingServer 的构造方法实现<br>然后创建客户端使用以下方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TestingCluster server=<span class="keyword">new</span> TestingCluster(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// server.getConnectString() 方法会返回可用的服务链接地址, 如: 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</span></span><br><span class="line">CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString(), retry);</span><br></pre></td></tr></table></figure></p><p>同样请记得释放资源</p><p><a href="https://github.com/ghthou/learning-distributed-lock" target="_blank" rel="noopener">测试源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JDK 的 &lt;code&gt;java.util.concurrent.locks&lt;/code&gt; 中，为我们提供了可重入锁，读写锁，及超时获取锁的方法。 为我们提供了完好的支持，但是在分布式系统中，当多个应用需要共同操作某一个资源时。 我么就无法使用 JDK 来实现了，这时就
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>生成带 LOGO 的二维码</title>
    <link href="https://ghthou.github.io/2018/01/13/%E7%94%9F%E6%88%90%E5%B8%A6-LOGO-%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>https://ghthou.github.io/2018/01/13/生成带-LOGO-的二维码/</id>
    <published>2018-01-13T05:02:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过 <a href="/2018/01/13/使用-zxing-生成二维码">使用 zxing 生成二维码</a> 我们可以实现简单二维码的生成, 但是二维码显示却过于单调, 本文变讲述如何利用 <a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener">thumbnailator</a> 为我们的二维码添加 LOGO</p></blockquote><p><a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener">thumbnailator</a> 是一个缩略图工具类库, 但它除了能缩略图片外, 还提供裁剪, 旋转, 水印等功能, 此次我们便借助它的水印 API 实现以上需求</p><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><ul><li>jdk1.8</li><li><a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener">thumbnailator</a></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.coobird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thumbnailator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><ul><li>准备一张二维码图片, 一张 logo 图片<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String qrCodeFilePath = <span class="string">"src/qrCode.jpg"</span>;</span><br><span class="line">String logoFilePath = <span class="string">"src/logo.jpg"</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/生成带-LOGO-的二维码/qrCode.png" alt="src/qrCode.png, 内容为 1"><br><img src="/images/生成带-LOGO-的二维码/logo.png" alt="src/logo.png"></p><ul><li><p>根据文件路径生成一个图片构造对象( <code>Thumbnails.of()</code> 方法还可以接收 <code>BufferedImage</code>,<code>InputStream</code>,<code>URL</code>,<code>String</code> 的可变参数类型)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thumbnails.Builder&lt;File&gt; builder = Thumbnails.of(<span class="keyword">new</span> File(qrCodeFilePath));</span><br></pre></td></tr></table></figure></li><li><p>创建一个水印对象, 水印对象需要三个参数 <code>Position position</code>, <code>BufferedImage watermarkImg</code>,<code>float opacity</code>, 其中 <code>Position</code> 是水印的坐标,<code>BufferedImage</code> 是水印图片,<code>opacity</code> 是不透明度, 值为 [0-1] 之间, 1 代表不透明.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BufferedImage bufferedImage = ImageIO.read(<span class="keyword">new</span> File(logoFilePath));</span><br><span class="line"><span class="comment">//Positions 实现了 Position 并提供九个坐标, 分别是 上左, 上中, 上右, 中左, 中中, 中右, 下左, 下中, 下右 我们使用正中的位置</span></span><br><span class="line">Watermark watermark = <span class="keyword">new</span> Watermark(Positions.CENTER, bufferedImage, <span class="number">1F</span>);</span><br></pre></td></tr></table></figure></li><li><p>为二维码设置水印, 并设置缩略比例为 1(即不压缩), 输出到一个新文件中(<code>outputFormat()</code> 为指定输出格式, 如: jpg,png)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.watermark(watermark).scale(<span class="number">1F</span>).toFile(<span class="keyword">new</span> File(<span class="string">"src/logoQrCode.png"</span>));</span><br></pre></td></tr></table></figure></li><li><p>生成后的二维码<br><img src="/images/生成带-LOGO-的二维码/logoQrCode.png" alt="src/logoQrCode.png"></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>通过以上方法我们能够简单的为二维码添加 LOGO, 但是实际使用时远没有这样简单, 有以下几个问题</p></li><li><p>logo 图片的尺寸可能并不固定, 可能有大有小, 这样就会导致 logo 在二维码中太小或太大<br>这时我们可以在创建 <code>BufferedImage</code> 时将原图压缩 / 放大至指定尺寸, 也可以使用二维码的尺寸乘以一定比例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//forceSize(int width, int height) 指将图片强制压缩为指定宽高, 如不强制, 可使用 size(int width, int height)</span></span><br><span class="line">BufferedImage bufferedImage = Thumbnails.of(<span class="keyword">new</span> File(logoFilePath)).forceSize(<span class="number">120</span>, <span class="number">120</span>).asBufferedImage();</span><br></pre></td></tr></table></figure></li><li><p>图片显示, logo 图片可能不是一个图片文件, 同时生成好之后的图片希望直接输出在页面上<br><code>Thumbnails.of()</code> 可以接收 <code>BufferedImage</code>,<code>InputStream</code>,<code>URL</code>,<code>String</code>,<code>File</code> 的可变 (<strong> 批量处理需要 </strong>) 参数类型<br><code>ImageIO.read()</code> 可以接收 <code>File</code>,<code>ImageInputStream</code>,<code>InputStream</code>,<code>URL</code> 参数类型<br>以下为 SpringMVC 动态生成带 LOGO 二维码示例,<code>QRCodeUtil.toBufferedImage()</code> 具体实现请看 <a href="http://www.jianshu.com/p/05e9ee773898" target="_blank" rel="noopener">生成二维码之 Java (Google zxing) 篇</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> logoUrl logo 链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/qrcode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qrcode</span><span class="params">(String content, String logoUrl, @RequestParam(defaultValue = <span class="string">"300"</span>)</span> <span class="keyword">int</span> width, @<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"300"</span>)</span> <span class="keyword">int</span> height,HttpServletResponse response) </span>&#123;</span><br><span class="line">    ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line">        <span class="comment">// 根据 QRCodeUtil.toBufferedImage() 返回的 BufferedImage 创建图片构件对象</span></span><br><span class="line">        Thumbnails.Builder&lt;BufferedImage&gt; builder = Thumbnails.of(QRCodeUtil.toBufferedImage(content, width, height));</span><br><span class="line">        <span class="comment">// 将 logo 的尺寸设置为二维码的 30% 大小, 可以自己根据需求调节</span></span><br><span class="line">        BufferedImage logoImage = Thumbnails.of(<span class="keyword">new</span> URL(logoUrl)).forceSize((<span class="keyword">int</span>) (width * <span class="number">0.3</span>), (<span class="keyword">int</span>) (height * <span class="number">0.3</span>)).asBufferedImage();</span><br><span class="line">        <span class="comment">// 设置水印位置(居中), 水印图片 BufferedImage, 不透明度(1F 代表不透明)</span></span><br><span class="line">        builder.watermark(Positions.CENTER, logoImage, <span class="number">1F</span>).scale(<span class="number">1F</span>);</span><br><span class="line">        <span class="comment">// 此处需指定图片格式, 否者报 Output format not specified 错误</span></span><br><span class="line">        builder.outputFormat(<span class="string">"png"</span>).toOutputStream(outputStream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 返回一个 BufferedImage 对象</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> width   宽</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> height  高</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">toBufferedImage</span><span class="params">(String content, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> WriterException, IOException </span>&#123;</span><br><span class="line">    BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line"><span class="keyword">return</span> MatrixToImageWriter.toBufferedImage(bitMatrix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="拓展思考"><a href="#拓展思考" class="headerlink" title="拓展思考"></a>拓展思考</h4><p>以上案例可知 <a href="https://github.com/coobird/thumbnailator" target="_blank" rel="noopener">thumbnailator</a> 水印功能的强大. 然而除了实现以上案例外, 我们也可以根据水印功能实现另外一种需求.<br>比如公司现在有一个推广需求, 让用户为我们的产品进行宣传, 达到多少次就进行奖励. 传统的实现方式是一段文字再配上一个专属链接. 但是此方式往往太过单调, 枯燥. 这个时候如果我们让设计提供一张内容丰富, 带有二维码的宣传图片, 然后根据专属链接生成二维码与宣传图片进行组合. 这时用户就有了一张自己的专属宣传图片. 此时通过直接宣传专属图片往往会比文字加链接有着更好的效果.<br>注: 此功能在图片合成时需要对二维码的位置进行定位, 此时可使用 <code>Position</code> 的实现类 <code>Coordinate</code> 完成<br>使用如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Coordinate 存在一个 Coordinate(int x, int y) 构造函数, x 为水印距离底图左边的像素, y 为上边</span></span><br><span class="line">BufferedImage bufferedImage = ImageIO.read(<span class="keyword">new</span> File(logoFilePath));</span><br><span class="line">Watermark watermark = <span class="keyword">new</span> Watermark(<span class="keyword">new</span> Coordinate(<span class="number">100</span>, <span class="number">100</span>), bufferedImage, <span class="number">1F</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通过 &lt;a href=&quot;/2018/01/13/使用-zxing-生成二维码&quot;&gt;使用 zxing 生成二维码&lt;/a&gt; 我们可以实现简单二维码的生成, 但是二维码显示却过于单调, 本文变讲述如何利用 &lt;a href=&quot;https://github.c
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="QRcode" scheme="https://ghthou.github.io/tags/QRcode/"/>
    
  </entry>
  
  <entry>
    <title>使用 zxing 生成二维码</title>
    <link href="https://ghthou.github.io/2018/01/13/%E4%BD%BF%E7%94%A8-zxing-%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>https://ghthou.github.io/2018/01/13/使用-zxing-生成二维码/</id>
    <published>2018-01-13T05:01:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.imooc.com/learn/531" target="_blank" rel="noopener">JAVA 生成二维码</a></li><li><a href="http://blog.csdn.net/morning99/article/details/48825035" target="_blank" rel="noopener">笔记，谷歌 Zxing 二维码，用数据流输出到页面显示</a></li></ul><h3 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h3><ul><li>jdk1.8（<strong>zxing 生成二维码图片文件需要 jdk1.7 及以上版本 </strong>）</li><li><p>zxing-javase</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="工具类代码"><a href="#工具类代码" class="headerlink" title="工具类代码"></a>工具类代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.WriterException;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二维码工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> width = <span class="number">300</span>;<span class="comment">// 默认二维码宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> height = <span class="number">300</span>;<span class="comment">// 默认二维码高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String format = <span class="string">"png"</span>;<span class="comment">// 默认二维码文件格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> HashMap();<span class="comment">// 二维码参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"utf-8"</span>);<span class="comment">// 字符编码</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);<span class="comment">// 容错等级 L、M、Q、H 其中 L 为最低, H 为最高</span></span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">2</span>);<span class="comment">// 二维码与图片边距</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个 BufferedImage 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width   宽</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height  高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">toBufferedImage</span><span class="params">(String content, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> WriterException, IOException </span>&#123;</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">        <span class="keyword">return</span> MatrixToImageWriter.toBufferedImage(bitMatrix);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将二维码图片输出到一个流中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stream  输出流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width   宽</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height  高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeToStream</span><span class="params">(String content, OutputStream stream, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> WriterException, IOException </span>&#123;</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">        MatrixToImageWriter.writeToStream(bitMatrix, format, stream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二维码图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 二维码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path    文件保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width   宽</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height  高</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createQRCode</span><span class="params">(String content, String path, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> <span class="keyword">throws</span> WriterException, IOException </span>&#123;</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">        <span class="comment">//toPath() 方法由 jdk1.7 及以上提供</span></span><br><span class="line">        MatrixToImageWriter.writeToPath(bitMatrix, format, <span class="keyword">new</span> File(path).toPath());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Spring-MVC-动态生成二维码"><a href="#使用-Spring-MVC-动态生成二维码" class="headerlink" title="使用 Spring MVC 动态生成二维码"></a>使用 Spring MVC 动态生成二维码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/qrcode"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qrcode</span><span class="params">(String content, @RequestParam(defaultValue = <span class="string">"300"</span>, required = <span class="keyword">false</span>)</span> <span class="keyword">int</span> width,@<span class="title">RequestParam</span><span class="params">(defaultValue = <span class="string">"300"</span>, required = <span class="keyword">false</span>)</span> <span class="keyword">int</span> height, HttpServletResponse response) </span>&#123;</span><br><span class="line">    ServletOutputStream outputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        outputStream = response.getOutputStream();</span><br><span class="line">        QRCodeUtil.writeToStream(content, outputStream, width, height);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                outputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://raw.githubusercontent.com/ghthou/Google-Authenticator/master/src/main/java/z/study/googleAuthenticator/util/QRCodeUtils.java" target="_blank" rel="noopener">QRCodeUtils.java 下载</a>(右键另存为)</li><li>JavaScript 生成二维码可参考 <a href="/2018/01/13/使用-jQuery-qrcode-生成二维码/">使用 jQuery-qrcode 生成二维码.md</a></li><li>如果想生成带 LOGO 的二维码可参考 <a href="/2018/01/13/生成带-LOGO-的二维码/">生成带 LOGO 的二维码</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.imooc.com/learn/531&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="QRcode" scheme="https://ghthou.github.io/tags/QRcode/"/>
    
  </entry>
  
  <entry>
    <title>使用 gzip 压缩请求正文</title>
    <link href="https://ghthou.github.io/2018/01/13/%E4%BD%BF%E7%94%A8-Gzip-%E5%8E%8B%E7%BC%A9%E8%AF%B7%E6%B1%82%E6%AD%A3%E6%96%87/"/>
    <id>https://ghthou.github.io/2018/01/13/使用-Gzip-压缩请求正文/</id>
    <published>2018-01-13T04:58:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在一些论坛，博客等项目中。 用户发送的帖子，文章内容可能会存在太长的情况。 这时如果用户的网速不佳，或者网络不稳定。 那么将会面临 <strong> 响应过慢、发送失败 </strong> 的情况。 如果网站还有自动保存的功能的话，这种情况会明显增多。 这时如果将传输的内容在本地进行压缩上传，然后在服务器进行解压。 对长文本的处理能够得到完好解决，同时极大减少了移动端用户的网络开销。</p></blockquote><p>本文创作思路来源于 <a href="https://imququ.com" target="_blank" rel="noopener">Jerry Qu</a> 的博客 <a href="https://imququ.com/post/how-to-compress-http-request-body.html" target="_blank" rel="noopener">如何压缩 HTTP 请求正文</a></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>在前台对请求正文使用 <code>pako_deflate.js</code> 进行本地 <code>gzip</code> 格式压缩<br>在后台使用 <code>Java</code> 对请求正文进行解压</p><h3 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h3><ul><li>jdk 1.8.0_77</li><li>idea 2016.2.1</li><li>maven 3.3.9</li></ul><h3 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h3><ul><li>commons-io-2.5 （简化 IO 操作）</li><li>json-lib-2.4 （处理请求正文中的参数）</li><li>spring-webmvc-4.3.4.RELEASE</li><li>pako_deflate-1.0.3.js （JS 文本压缩工具类）</li></ul><h3 id="JS-压缩请求正文"><a href="#JS-压缩请求正文" class="headerlink" title="JS 压缩请求正文"></a>JS 压缩请求正文</h3><p>因为只在前台进行压缩，所以只需引用 <a href="https://github.com/nodeca/pako" target="_blank" rel="noopener">pako</a> 的压缩专用文件 <a href="https://github.com/nodeca/pako/blob/master/dist/pako_deflate.min.js" target="_blank" rel="noopener">pako_deflate.min.js</a><br>又因为我在项目中主要使用 jQuery 发送 Ajax 请求，所以引入 jQuery<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery-2.2.4.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="pako_deflate.min.js"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>将发送的参数转换为 JSON 字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: <span class="string">"标题"</span>,</span><br><span class="line">    content: <span class="string">"内容"</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><p>gzip 虽然能极大的压缩请求正文。 但是如果内容过小，压缩后内容反而会增大，经测试，对于 <code>params.length</code> 大于 1000 的文本压缩效果能够达到 <strong>60%</strong> 以上，所以在压缩前，需要对内容进行判断<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    title: title,</span><br><span class="line">    content: content</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">var</span> compressBeginLen = params.length;</span><br><span class="line"><span class="keyword">if</span> (compressBeginLen &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="comment">// 对 JSON 字符串进行压缩</span></span><br><span class="line">    <span class="comment">// pako.gzip(params) 默认返回一个 Uint8Array 对象, 如果此时使用 Ajax 进行请求, 参数会以数组的形式进行发送</span></span><br><span class="line">    <span class="comment">// 为了解决该问题, 添加 &#123;to: "string"&#125; 参数, 返回一个二进制的字符串</span></span><br><span class="line">    params = pako.gzip(params, &#123;<span class="attr">to</span>: <span class="string">"string"</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"/gzip"</span>,</span><br><span class="line">    data: params,</span><br><span class="line">    dataType: <span class="string">"text"</span>,</span><br><span class="line">    type: <span class="string">"post"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="comment">// 如果 compressBeginLen 大于 1000, 标记此次请求的参数使用了 gzip 压缩</span></span><br><span class="line">        <span class="string">"Content-Encoding"</span>: params.length&gt;<span class="number">1000</span>?<span class="string">"gzip"</span>:<span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//dosomething</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="Java-解压请求正文"><a href="#Java-解压请求正文" class="headerlink" title="Java 解压请求正文"></a>Java 解压请求正文</h3><p>首先获取 <code>Content-Encoding</code> 请求头，根据该请求头中的内容进行逻辑处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/gzip"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">gzip</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String params = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取 Content-Encoding 请求头</span></span><br><span class="line">        String contentEncoding = request.getHeader(<span class="string">"Content-Encoding"</span>);</span><br><span class="line">        <span class="keyword">if</span> (contentEncoding != <span class="keyword">null</span> &amp;&amp; contentEncoding.equals(<span class="string">"gzip"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 获取输入流</span></span><br><span class="line">            BufferedReader reader = request.getReader();</span><br><span class="line">            <span class="comment">// 将输入流中的请求实体转换为 byte 数组, 进行 gzip 解压</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = IOUtils.toByteArray(reader, <span class="string">"iso-8859-1"</span>);</span><br><span class="line">            <span class="comment">// 对 bytes 数组进行解压</span></span><br><span class="line">            params = GZIPUtil.uncompress(bytes);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            BufferedReader reader = request.getReader();</span><br><span class="line">            params = IOUtils.toString(reader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span> &amp;&amp; params.trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 因为前台对参数进行了 url 编码, 在此进行解码</span></span><br><span class="line">            params = URLDecoder.decode(params, <span class="string">"utf-8"</span>);</span><br><span class="line">            <span class="comment">// 将解码后的参数转换为 json 对象</span></span><br><span class="line">            JSONObject json = JSONObject.fromObject(params);</span><br><span class="line">            <span class="comment">// 从 json 对象中获取参数进行后续操作</span></span><br><span class="line">            System.out.println(<span class="string">"title:\t"</span> + json.getString(<span class="string">"title"</span>));</span><br><span class="line">            System.out.println(<span class="string">"content:\t"</span> + json.getString(<span class="string">"content"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Java gzip 解压方法 <code>GZIPUtil.uncompress</code> 参考 <a href="http://blog.csdn.net/wenqisun/article/details/51121460" target="_blank" rel="noopener">Java 使用 GZIP 进行压缩和解压缩（GZIPOutputStream，GZIPInputStream）</a>一文而成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解压 gzip 格式 byte 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes gzip 格式 byte 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> charset 字符集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uncompress</span><span class="params">(<span class="keyword">byte</span>[] bytes, String charset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayInputStream byteArrayInputStream = <span class="keyword">null</span>;</span><br><span class="line">    GZIPInputStream gzipInputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        gzipInputStream = <span class="keyword">new</span> GZIPInputStream(byteArrayInputStream);</span><br><span class="line">        <span class="comment">// 使用 org.apache.commons.io.IOUtils 简化流的操作</span></span><br><span class="line">        IOUtils.copy(gzipInputStream, byteArrayOutputStream);</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toString(charset);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放流资源</span></span><br><span class="line">        IOUtils.closeQuietly(gzipInputStream);</span><br><span class="line">        IOUtils.closeQuietly(byteArrayInputStream);</span><br><span class="line">        IOUtils.closeQuietly(byteArrayOutputStream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外 <a href="https://imququ.com" target="_blank" rel="noopener">Jerry Qu</a> 实现了一个服务器使用 Node.js 解压的 <a href="https://qgy18.com/request-compress/" target="_blank" rel="noopener">DEMO</a> 并提供 deflate，zlib，gzip 三种压缩，解压方式</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/ghthou/gzip" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在一些论坛，博客等项目中。 用户发送的帖子，文章内容可能会存在太长的情况。 这时如果用户的网速不佳，或者网络不稳定。 那么将会面临 &lt;strong&gt; 响应过慢、发送失败 &lt;/strong&gt; 的情况。 如果网站还有自动保存的功能的话，这种情况会明显增
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="Gzip" scheme="https://ghthou.github.io/tags/Gzip/"/>
    
  </entry>
  
  <entry>
    <title>使用 SiteMesh3 完善页面布局</title>
    <link href="https://ghthou.github.io/2018/01/13/%E4%BD%BF%E7%94%A8-SiteMesh3-%E5%AE%8C%E5%96%84%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/"/>
    <id>https://ghthou.github.io/2018/01/13/使用-SiteMesh3-完善页面布局/</id>
    <published>2018-01-13T04:54:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在网页开发中，大部分网页都具有相同的页头，页尾，菜单等模块。 一般情况下我们会将这些共用的代码单独抽取成一个页面，然后进行包含。 虽然这样能够达到代码复用的效果，但是如果引入的页面过多，一来会带来修改不变的效果，二来依然会形成多个页面使用相同的代码 （页面包含代码），此时我们可以使用 SiteMesh3 来妥善解决这个问题</p></blockquote><h3 id="最初页面形式"><a href="#最初页面形式" class="headerlink" title="最初页面形式"></a>最初页面形式</h3><p><img src="/images/使用-SiteMesh3-完善页面布局/最初页面形式.png" alt="最初页面形式"></p><h3 id="使用-JSP-进行页面包含"><a href="#使用-JSP-进行页面包含" class="headerlink" title="使用 JSP 进行页面包含"></a>使用 JSP 进行页面包含</h3><p><img src="/images/使用-SiteMesh3-完善页面布局/页面包含.png" alt="页面包含"></p><p>进行页面包含后，能达到一些共用页面的代码复用，但是如果页面布局复杂的话，会存在大量的页面包含代码，依然给我们带来了不便</p><h3 id="SiteMesh3-方式"><a href="#SiteMesh3-方式" class="headerlink" title="SiteMesh3 方式"></a>SiteMesh3 方式</h3><h4 id="SiteMesh3-使用演示"><a href="#SiteMesh3-使用演示" class="headerlink" title="SiteMesh3 使用演示"></a>SiteMesh3 使用演示</h4><p>使用 SiteMesh3 时需要先定义一个装饰器，在这个装饰器中我们可以定义页面的布局，然后配置动态内容输出位置即可<br>示例如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;sitemesh:write property="title"/&gt; 会输出原始页面的 title 标签里面的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">sitemesh:write</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/static/css/web.css"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;sitemesh:write property="head"/&gt; 会输出原始页面 head 标签里面的内容 (不包括 title 标签)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemesh:write</span> <span class="attr">property</span>=<span class="string">"head"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;sitemesh:write property="body"/&gt; 会输出原始页面 body 标签里面的内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemesh:write</span> <span class="attr">property</span>=<span class="string">"body"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>假如此时存在一个这样的原始页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"SiteMesh3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello,world</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>经过 SiteMesh3 装饰后的页面如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"/static/css/web.css"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"SiteMesh3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        hello,world</span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/static/js/web.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以发现使用 SiteMesh3 进行装饰能够让我们更加专注于一些与页面独有的代码逻辑，能避免相同的代码在多个页面重复出现</p><h4 id="SiteMesh3-使用说明"><a href="#SiteMesh3-使用说明" class="headerlink" title="SiteMesh3 使用说明"></a>SiteMesh3 使用说明</h4><p>通过上面的一个小例子，我们可以发现使用 SiteMesh3 需要一个装饰器页面。 由此可以牵扯出另外几个问题，对哪些页面进行装饰？ 使用哪个装饰页面装饰？通过以下配置可以完成这些疑问<br>首先我们需要引入 SiteMesh3 相关的 jar 包<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sitemesh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其次，SiteMesh3 会对一些页面进行装饰，所以我们需要添加一个过滤器来进行页面过滤<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.sitemesh.config.ConfigurableSiteMeshFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果项目中的页面地址以  .do 或者 .action 结尾可以使用 *.do 或 *.action--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同时我们还需要配置装饰器，要装饰的页面，不需要装饰的页面等信息<br>在 <code>WEB-INF</code> 目录下创建一个 <code>sitemesh3.xml</code> 文件，请确保路径正确，SiteMesh3 会根据 <code>/WEB-INF/sitemesh3.xml</code> 加载文件<br>文件内容如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sitemesh</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- path 是指要进行装饰的页面 如 /index.jsp 对应 http://localhost:8080/index.jsp --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- decorator 是指装饰器页面 /decorators/default.jsp 对应位置为 src/main/webapp/decorators/default.jsp--&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- sitemesh3 会在 index.jsp 页面返回时提取 title head body 中的内容, 然后在 default.jsp 根据输出标签进行对应输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">path</span>=<span class="string">"/index.jsp"</span> <span class="attr">decorator</span>=<span class="string">"/decorators/default.jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sitemesh</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此时我们可以将上面演示中的文件内容建立 <code>index.jsp</code> 和 <code>default.jsp</code> 页面，然后进行测试访问，会发现能达到演示中的效果</p><h4 id="SiteMesh3-高级配置"><a href="#SiteMesh3-高级配置" class="headerlink" title="SiteMesh3 高级配置"></a>SiteMesh3 高级配置</h4><p>通过上面的简单配置我们可以实现一个最基本的页面装饰，与此同时 SiteMesh3 还支持一些更为高级的配置</p><ul><li><p>默认装饰器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果不填写 path 路径, 则 SiteMesh3 会在找不到匹配的装饰器时, 使用这个装饰器进行装饰 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 推荐在该页面中定义一些全网站共用的代码, 如: 网站统计相关脚本, 浏览器渲染方式等 meta 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">decorator</span>=<span class="string">"/decorators/default.jsp"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多个装饰器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/multi.jsp<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">decorator</span>&gt;</span>/decorators/multi_1.jsp<span class="tag">&lt;/<span class="name">decorator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">decorator</span>&gt;</span>/decorators/multi_2.jsp<span class="tag">&lt;/<span class="name">decorator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">decorator</span>&gt;</span>/decorators/multi_3.jsp<span class="tag">&lt;/<span class="name">decorator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>装饰器会按照配置的先后顺序进行装饰<br>假如<br>multi.jsp 中 body 内容为 0，multi_1.jsp 中内容为 1 同时在下面输出原始页面中的 body 内容<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemesh:write</span> <span class="attr">property</span>=<span class="string">"body"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>multi_2.jsp 中内容为 2 同时在下面输出原始页面中的 body 内容</p><p>最终返回的页面内容为<br>2<br>1<br>0</p><ul><li><p>不需要装饰</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SiteMesh3 会先判断是否不需要装饰, 然后再判断是否存在匹配的装饰器 --&gt;</span><br><span class="line">&lt;!-- /exclude/* 会对所有以 /exclude 开头的 url 都不会进行装饰 包括 /exclude/index.jsp,/exclude/item/index.jsp --&gt;</span><br><span class="line">&lt;mapping path=&quot;/exclude/*&quot; exclue=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>MIME 类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">默认情况下, SiteMesh3 只对响应头 Content-Type 中包含 text/html 的页面进行装配</span></span><br><span class="line"><span class="comment">如果会需要装配其他格式的页面, 添加多个 mime-type 标签即可</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mime-type</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">mime-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mime-type</span>&gt;</span>application/vnd.wap.xhtml+xml<span class="tag">&lt;/<span class="name">mime-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mime-type</span>&gt;</span>application/xhtml+xml<span class="tag">&lt;/<span class="name">mime-type</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义输出标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">输出标签格式 &lt;sitemesh:write property="body"/&gt;</span></span><br><span class="line"><span class="comment">SiteMesh3 默认支持 title, head, body 三个标签, 如果需要支持其他标签, 可以通过实现 org.sitemesh.content.tagrules.TagRuleBundle 接口中的 install 方法来完成对标签的拓展</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content-processor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-rule-bundle</span> <span class="attr">class</span>=<span class="string">"com.github.ghthou.learning.sitemesh3.ExpandTagRuleBundle"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">content-processor</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>ExpandTagRuleBundle 代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpandTagRuleBundle</span> <span class="keyword">implements</span> <span class="title">TagRuleBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">install</span><span class="params">(State defaultState, ContentProperty contentProperty, SiteMeshContext siteMeshContext)</span> </span>&#123;</span><br><span class="line">        defaultState.addRule(<span class="string">"header"</span>, <span class="keyword">new</span> ExportTagToContentRule(siteMeshContext, contentProperty.getChild(<span class="string">"header"</span>), <span class="keyword">false</span>));</span><br><span class="line">        defaultState.addRule(<span class="string">"menu"</span>, <span class="keyword">new</span> ExportTagToContentRule(siteMeshContext, contentProperty.getChild(<span class="string">"menu"</span>), <span class="keyword">false</span>));</span><br><span class="line">        defaultState.addRule(<span class="string">"footer"</span>, <span class="keyword">new</span> ExportTagToContentRule(siteMeshContext, contentProperty.getChild(<span class="string">"footer"</span>), <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanUp</span><span class="params">(State defaultState, ContentProperty contentProperty, SiteMeshContext siteMeshContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时可以使用 <code>&lt;sitemesh:write property=&quot;header&quot;/&gt;</code> 标签在装饰器中输出原始页面的 header 标签值</p><ul><li><p>其他说明</p><ul><li><code>title</code>, <code>head</code>, <code>body</code> 标签的实现请参考             <code>org.sitemesh.content.tagrules.html.CoreHtmlTagRuleBundle</code></li><li><code>title</code>, <code>head</code>, <code>body</code> 等自定义标签只会提取原始页面中的第一个找到的标签</li><li><p>默认配置文件路径为 <code>/WEB-INF/sitemesh3.xml</code> ，如果需要自定义配置路径，请在配置 <code>filter</code> 时配置 <code>configFile</code> 属性，如将 <code>sitemesh3.xml</code> 配置文件放在 <code>resources</code> 文件夹中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>sitemesh<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.sitemesh.config.ConfigurableSiteMeshFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置配置文件路径 默认为 /WEB-INF/sitemesh3.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>configFile<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/sitemesh3.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果装饰器是 <code>html</code> 文件会存在中文乱码的问题，在 SpringMVC 中可在 <code>web.xml</code> 文件配置如下过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 SpringMVC 中因为 SiteMesh3 需要直接访问到装饰页面，所以需要增加如下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者配置 url 与文件夹映射关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/decorators/**"</span> <span class="attr">location</span>=<span class="string">"/decorators/"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果装饰器为 JSP 页面，则可以使用 EL 表达式获取原始页面中的属性<br>假如在 SpringMVC 中设置如下属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/index"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"date"</span>, <span class="keyword">new</span> Date().toLocaleString());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  则可以在方法返回页面 <code>/index.jsp</code> 和该 url 的装饰页面 <code>/decorators/default.jsp</code> 中使用 EL 表达式获取 <code>date</code> 属性</p></li></ul></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://wiki.sitemesh.org/wiki/display/sitemesh3/Home" target="_blank" rel="noopener">SiteMesh3 官网文档</a><br><a href="https://github.com/sitemesh/sitemesh3" target="_blank" rel="noopener">SiteMesh3 GitHub</a></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/ghthou/learning-sitemesh3" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在网页开发中，大部分网页都具有相同的页头，页尾，菜单等模块。 一般情况下我们会将这些共用的代码单独抽取成一个页面，然后进行包含。 虽然这样能够达到代码复用的效果，但是如果引入的页面过多，一来会带来修改不变的效果，二来依然会形成多个页面使用相同的代码
      
    
    </summary>
    
      <category term="Java" scheme="https://ghthou.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://ghthou.github.io/tags/Java/"/>
    
      <category term="SiteMesh" scheme="https://ghthou.github.io/tags/SiteMesh/"/>
    
  </entry>
  
  <entry>
    <title>使用 jQuery-qrcode 生成二维码</title>
    <link href="https://ghthou.github.io/2018/01/13/%E4%BD%BF%E7%94%A8-jQuery-qrcode-%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>https://ghthou.github.io/2018/01/13/使用-jQuery-qrcode-生成二维码/</id>
    <published>2018-01-13T04:51:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文讲述如何使用 <a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="noopener">jquery-qrcode</a> 生成二维码</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 jQuery 与 jquery.qrcode--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery-2.2.4.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"jquery.qrcode.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建二维码父级元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrcode"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"qrcode2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 选中要生成二维码的元素节点, 调用 qrcode 方法, 传入数据即可</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#qrcode"</span>).qrcode(<span class="string">"https://google.com"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//        同时提供更多参数, 具体如下</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//render绘制方式 canvas(绘制成一张图片) table(绘制成一个表格) 默认 canvas</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//width    二维码宽度  默认 256</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//height        二维码高度  默认 256</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//correctLevel  容错等级    1(L),0(M),3(Q),2(H)    1 最低, 2 最高  默认为 2</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//background    背景颜色    默认白色    #ffffff</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//foreground    前景颜色    默认黑色    #000000</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 使用示例</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#qrcode2"</span>).qrcode(&#123;</span></span><br><span class="line"><span class="javascript">        text: <span class="string">"https://google.com"</span>,</span></span><br><span class="line"><span class="javascript">        render: <span class="string">"table"</span>,</span></span><br><span class="line">        width: 300,</span><br><span class="line">        height: 300,</span><br><span class="line">        correctLevel: 3,</span><br><span class="line"><span class="javascript">        background: <span class="string">"#eceadb"</span>,</span></span><br><span class="line"><span class="javascript">        foreground: <span class="string">"#444"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="中文乱码解决办法"><a href="#中文乱码解决办法" class="headerlink" title="中文乱码解决办法"></a>中文乱码解决办法</h3><p>由于 qrcode 的编码原因会导致中文乱码<br>如果能确保二维码中的内容为 <strong> 链接 </strong>, 那么在使用前对内容进行 <strong>encodeURI</strong> 编码即可<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#qrcode"</span>).qrcode(<span class="built_in">encodeURI</span>(<span class="string">"https://google.com"</span>));</span><br></pre></td></tr></table></figure></p><p>如果不是链接, 需要对二维码内容进行编码, 方法来源于 <a href="http://justcoding.iteye.com/blog/2213034" target="_blank" rel="noopener">http://justcoding.iteye.com/blog/2213034</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUtf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> out, i, len, c;</span><br><span class="line">    out = <span class="string">""</span>;</span><br><span class="line">    len = str.length;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        c = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span> ((c&gt;= <span class="number">0x0001</span>) &amp;&amp; (c &lt;= <span class="number">0x007F</span>)) &#123;</span><br><span class="line">            out += str.charAt(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c&gt; <span class="number">0x07FF</span>) &#123;</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0xE0</span> | ((c&gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c&gt;&gt;  <span class="number">0</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0xC0</span> | ((c&gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x1F</span>));</span><br><span class="line">            out += <span class="built_in">String</span>.fromCharCode(<span class="number">0x80</span> | ((c&gt;&gt;  <span class="number">0</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125; </span><br><span class="line">$(<span class="string">"#qrcode"</span>).qrcode(toUtf8(<span class="string">"https://google.com"</span>));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文讲述如何使用 &lt;a href=&quot;https://github.com/jeromeetienne/jquery-qrcode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jquery-qrcode&lt;/a&gt; 生成二维码&lt;/p&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://ghthou.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://ghthou.github.io/tags/JavaScript/"/>
    
      <category term="QRcode" scheme="https://ghthou.github.io/tags/QRcode/"/>
    
  </entry>
  
  <entry>
    <title>使用 Docker 快速搭建开发环境</title>
    <link href="https://ghthou.github.io/2018/01/13/%E4%BD%BF%E7%94%A8-Docker-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://ghthou.github.io/2018/01/13/使用-Docker-快速搭建开发环境/</id>
    <published>2018-01-13T03:14:00.000Z</published>
    <updated>2020-11-07T10:26:04.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在代码开发中, 除了语言开发环境及 IDE 外, 我们往往还需要依赖其他第三方服务, 如:<code>数据库</code>,<code>服务器</code>,<code>缓存</code>,<code>搜索</code>,<code>MQ</code> 等等. 而这些服务的安装各式各样, 有的极为复杂, 有的对开发机有极大的限制, 甚至有的直接不支持当前开发机. 给我们的开发环境搭建带来了极大的困难. 这时我们可以选择使用 <code>Docker</code> 来快速搭建开发环境, 屏蔽复杂的安装过程, 服务配置.</p></blockquote><h3 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h3><p>我们参考 Docker 官网中的概述 <a href="https://www.docker.com/what-docker" target="_blank" rel="noopener">what-docker</a></p><blockquote><p>Docker 是世界领先的软件容器平台。<strong> 开发人员使用 Docker 来消除与同事的代码协作时的 “我机器上的工作” 问题 </strong>。运营商使用 Docker 在独立的容器中并行运行和管理应用程序，以获得更好的计算密度。企业使用 Docker 构建灵活的软件传送管道，可以更快，更安全地运行新功能，并且对于 Linux 和 Windows Server 应用程序都有信心。<br>– 来自谷歌翻译</p></blockquote><p>在其中的 <code>Docker For Developers</code> 部分中, 我们可以查看对于我们开发者具体有哪些作用</p><blockquote><p>Docker 自动执行设置和配置开发环境的重复任务，以便开发人员可以专注于重要的事情：构建出优秀的软件。</p></blockquote><blockquote><p>使用 Docker 的开发人员不必安装和配置复杂数据库，也不用担心在不兼容的语言工具链版本之间切换。当应用程序 Docker 化时，这种复杂性被推入容易构建，共享和运行的容器中。将同事加入新的代码库不再意味着安装软件和解释安装程序的时间。Dockerfiles 随附的代码更简单：依赖关系被拉为整齐的 Docker 映像，任何具有 Docker 和编辑器的人都可以在几分钟内构建和调试应用程序。<br>– 来自谷歌翻译</p></blockquote><p><strong> 简单来说, 使用 Docker 我们可以专注于代码的编写, 忽略其他软件复杂的安装, 配置. 同时可以统一线上, 线下环境, 不受服务版本差异的影响 </strong></p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>请参考 Docker 官方文档中的 <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener">Install Docker</a><br>目前 Docker 支持的系统版本如下<br><img src="/images/使用-Docker-快速搭建开发环境/Docker支持的系统版本.png" alt="Docker 支持的系统版本"><br>Docker 最初是在 Ubuntu 12.04 上开发实现的, 另外 Docker 官网文档中的一些操作命令也是基于 Ubuntu 来讲解的, 如果有条件, 推荐使用 Ubuntu<br>Linux 安装完成后, 请查看 <a href="https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user" target="_blank" rel="noopener">Post-installation steps for Linux</a> 完成一些后续配置<br>对于 Linux 用户需要特别注意, 如果是以非 <code>root</code> 用户运行, 需要创建 <code>docker</code> 组, 并将当前用户添加到 <code>docker</code> 组中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p><p>Docker 中使用的镜像都需要从网站上下载, 因为网络原因, 国内下载速度往往不佳, 此时可以使用国内的一些加速器来加速下载, 如:<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="noopener">DaoCloud</a>,<a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="noopener">阿里云</a>, 具体用法, 请登录后查看网站说明文档</p><h3 id="使用-Docker-搭建开发环境"><a href="#使用-Docker-搭建开发环境" class="headerlink" title="使用 Docker 搭建开发环境"></a>使用 Docker 搭建开发环境</h3><p>现在以搭建 <code>mysql</code> 为例</p><h4 id="搜索-mysql-镜像"><a href="#搜索-mysql-镜像" class="headerlink" title="搜索 mysql 镜像"></a>搜索 <code>mysql</code> 镜像</h4><p>首先从 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 网站中搜索你需要的镜像, 如 <code>mysql</code><br><img src="/images/使用-Docker-快速搭建开发环境/hub搜索镜像.png" alt="hub 搜索镜像"><br>其中第一个带有 <code>official</code> 单词的表明为 Dcoker 官方提供的镜像, 下面的三个为个人 / 组织上传的镜像<br>我们点击右侧 <code>DETAILS</code> 按钮查看镜像详情<br><img src="/images/使用-Docker-快速搭建开发环境/hub镜像说明.png" alt="hub 镜像说明"><br>图中的 <code>8.0.1</code> 至 <code>5.5.55</code> 四行表示支持的 <code>mysql</code> 版本, 同时附带镜像构建的 <code>Dockerfile</code> 文件<br>右侧的 <code>docker pull mysql</code> 是镜像的下载命令, 此时我们可以在命令行中执行该命令进行下载, 默认下载版本为 <code>latest</code><br>如果希望指定下载版本, 使用如下命令格式 <code>docker pull mysql:版本号</code>, 如 <code>docker pull mysql:5.6</code></p><h4 id="下载-mysql-镜像"><a href="#下载-mysql-镜像" class="headerlink" title="下载 mysql 镜像"></a>下载 <code>mysql</code> 镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h4 id="运行-mysql-镜像"><a href="#运行-mysql-镜像" class="headerlink" title="运行 mysql 镜像"></a>运行 <code>mysql</code> 镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure><p>此时会在命令行中输出该容器运行时的日志, 若要退出, 请按 <code>Ctrl+c</code><br>如果希望在后台运行, 加入 <code>-d</code> 参数即可<br>运行参数说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--name mysql <span class="comment">#镜像运行的容器名称为 mysql</span></span><br><span class="line">--rm <span class="comment">#容器退出后删除该容器</span></span><br><span class="line">-p 3306:3306 <span class="comment">#将本机的 3306 端口映射到该容器的 3306 端口</span></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root <span class="comment">#为容器配置一个名为 MYSQL_ROOT_PASSWORD, 值为 root 的环境变量, 因 mysql 容器的特殊性, 必须配置该环境变量</span></span><br><span class="line">-d <span class="comment">#在后台运行该容器</span></span><br></pre></td></tr></table></figure></p><h3 id="测试容器"><a href="#测试容器" class="headerlink" title="测试容器"></a>测试容器</h3><p>在后台运行 <code>mysql</code> 容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure></p><p>查看当前运行容器列表<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps</span><br></pre></td></tr></table></figure></p><p><img src="/images/使用-Docker-快速搭建开发环境/docker-ps.png" alt="docker ps"><br>我们可以发现 <code>mysql</code> 已在后台运行<br>此时我们可以使用 <code>Navicat</code>,<code>SQLyog</code> 进行链接测试<br><code>ip</code>: 运行容器机器的 ip<br><code>端口</code>:3306<br><code>用户名</code>:root<br><code>密码</code>:root, 即 <code>MYSQL_ROOT_PASSWORD</code> 对应的值<br>亦可使用如下命令进入 <code>mysql</code> 命令行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --link mysql:mysql --rm mysql:5.7 sh -c <span class="string">'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR"-P"$MYSQL_PORT_3306_TCP_PORT"-uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'</span></span><br></pre></td></tr></table></figure></p><p>运行参数说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-it <span class="comment">#运行容器后进入一个交互式的终端</span></span><br><span class="line">--link mysql:mysql <span class="comment">#链接一个名称为 mysql 的容器, 并为该容器配置一个名为 mysql 的 hosts</span></span><br><span class="line">sh -c <span class="string">'exec mysql -h"$MYSQL_PORT_3306_TCP_ADDR"-P"$MYSQL_PORT_3306_TCP_PORT"-uroot -p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'</span> <span class="comment">#为运行容器后执行的命令, 其中诸如 $MYSQL_PORT_3306_TCP_ADDR,$MYSQL_PORT_3306_TCP_PORT 环境变量是容器根据 --link mysql:mysql 自动生成</span></span><br></pre></td></tr></table></figure></p><h4 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h4><p>mysql 镜像默认使用的配置文件为 <code>/etc/mysql/my.cnf</code><br>如果我们需要自定义配置文件可以使用如下命令覆盖原本配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d -v ~/docker/data/mysql/my.cnf:/etc/mysql/my.cnf mysql:5.7</span><br></pre></td></tr></table></figure></p><p>运行参数说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v ~/docker/data/mysql/my.cnf:/etc/mysql/my.cnf <span class="comment">#使用当前机器下的 ~/docker/data/mysql/my.cnf 文件挂载为容器中的 /etc/mysql/my.cnf 文件</span></span><br></pre></td></tr></table></figure></p><p>在 <code>mysql</code> 镜像中默认存储目录为 <code>/var/lib/mysql</code>, 这样存在容器删除后数据丢失的问题<br>为了防止这一情况产生, 我们需要将外部文件夹挂载到容器的 <code>/var/lib/mysql</code> 中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -d -v ~/docker/data/mysql/datadir:/var/lib/mysql mysql:5.7</span><br></pre></td></tr></table></figure></p><p>此时我们查看 <code>~/docker/data/mysql/datadir</code> 文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll -h ~/docker/data/mysql/datadir</span><br></pre></td></tr></table></figure></p><p><img src="/images/使用-Docker-快速搭建开发环境/datadir文件夹.png" alt="datadir 文件夹"><br>发现已经在该文件夹内生成了一些 <code>mysql</code> 的初始化文件<br>关于 <code>mysql</code> 镜像的更多信息可在 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 中对应的 <a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener">镜像详情</a> 查看<br>关于其他如 <code>redis</code>,<code>nginx</code>,<code>mongo</code> 等镜像的搭建及配置皆可在 <a href="https://hub.docker.com" target="_blank" rel="noopener">hub.docker.com</a> 中搜索查看</p><p><strong> 如果希望更加系统的学习 <code>Docker</code> 信息, 请查看 <a href="https://docs.docker.com/" target="_blank" rel="noopener">官网文档</a></strong><br>如果想查看中文文档, 可以去看 <a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker 官方文档</a></li><li><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker —— 从入门到实践</a></li><li><a href="https://github.com/docker/labs" target="_blank" rel="noopener">Docker-labs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在代码开发中, 除了语言开发环境及 IDE 外, 我们往往还需要依赖其他第三方服务, 如:&lt;code&gt;数据库&lt;/code&gt;,&lt;code&gt;服务器&lt;/code&gt;,&lt;code&gt;缓存&lt;/code&gt;,&lt;code&gt;搜索&lt;/code&gt;,&lt;code&gt;MQ&lt;/cod
      
    
    </summary>
    
      <category term="Docker" scheme="https://ghthou.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://ghthou.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
